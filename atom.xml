<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WYG</title>
  
  <subtitle>王延刚的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangyangang.github.io/"/>
  <updated>2019-12-09T13:41:25.380Z</updated>
  <id>https://wangyangang.github.io/</id>
  
  <author>
    <name>王延刚</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法基础</title>
    <link href="https://wangyangang.github.io/2019/12/08/%E7%AE%97%E6%B3%95/"/>
    <id>https://wangyangang.github.io/2019/12/08/%E7%AE%97%E6%B3%95/</id>
    <published>2019-12-08T08:08:49.000Z</published>
    <updated>2019-12-09T13:41:25.380Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''冒泡排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    length = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    count = <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(length<span class="number">-1</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> ls[index+<span class="number">1</span>] &lt; ls[index]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                ls[index], ls[index+<span class="number">1</span>] = ls[index+<span class="number">1</span>], ls[index]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        count += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> count == length:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">break</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> ls</span></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''选择排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n<span class="number">-1</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        min_index = i</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> ls[min_index] &gt; ls[j]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                min_index = j</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        ls[min_index], ls[i] = ls[i], ls[min_index]</span></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''插入排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> ls[i] &lt; ls[i<span class="number">-1</span>]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                ls[i], ls[i<span class="number">-1</span>] = ls[i<span class="number">-1</span>], ls[i]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                i -= <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">break</span></span></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''希尔排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''希尔排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    gap = len(ls) // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, n):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> ls[i-gap] &gt; ls[i]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                    ls[i-gap], ls[i] = ls[i], ls[i-gap]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    i -= gap</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">break</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        gap //= <span class="number">2</span></span></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(ls, first, last)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''快速排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> first &gt;= last:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    mid_value = ls[first]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    low = first</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    high = last</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> low &lt; high:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> ls[high] &gt;= mid_value:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            high -= <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        ls[low] = ls[high]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> ls[low] &lt; mid_value:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            low += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        ls[high] = ls[low]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    ls[low] = mid_value</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    quick_sort(ls, first, low<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    quick_sort(ls, low+<span class="number">1</span>, last)</span></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''归并排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> ls</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    mid = n // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    left_li = merge_sort(ls[:mid])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    right_li = merge_sort(ls[mid:])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    left_pointer ,right_pointer = <span class="number">0</span>, <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    result = []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> left_pointer &lt; len(left_li) <span class="keyword">and</span> right_pointer &lt; len(right_li):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> left_li[left_pointer] &lt; right_li[right_pointer]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            result.append(left_li[left_pointer])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            left_pointer += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            result.append(right_li[right_pointer])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            right_pointer += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    result += left_li[left_pointer:]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    result += right_li[right_pointer:]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> result</span></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(ls, item)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''二分查找'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        mid = n // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> ls[mid] == item:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">elif</span> item &lt; ls[mid]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> binary_search(ls[:mid], item)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> binary_search(ls[mid+<span class="number">1</span>:], item)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://wangyangang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://wangyangang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql基础知识</title>
    <link href="https://wangyangang.github.io/2019/12/08/mysql-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/mysql-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T13:40:36.376Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><ul><li>查看mysql数据库日志<br>查看mysql数据库日志可以查看对数据库的操作记录。 mysql日志文件默认没有产生，需要做如下配置：<br><code>sudo vi /etc/mysql/mysql.conf.d/mysqld.conf</code><br><img src="%E6%9B%B4%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt=""><br>把68，69行前面的#去除，然后保存并使用如下命令重启mysql服务。<br><code>sudo service mysql restart</code><br>使用如下命令打开mysql日志文件。<br><code>sudo tail -f /var/log/mysql/mysql.log #可以实时查看数据库的日志内容</code><blockquote><p>适用于ubuntu</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://wangyangang.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://wangyangang.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>django的安装和使用</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T14:06:35.347Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="虚拟环境的搭建"><a href="#虚拟环境的搭建" class="headerlink" title="虚拟环境的搭建"></a>虚拟环境的搭建</h2><blockquote><p>为什么需要虚拟环境？<br><code>django</code>是一个用来开发<code>python</code>网站的框架。因为在开发过程中要用到很多的<code>python</code>包，而<code>python</code>包和<code>django</code>框架本身以来特定的<code>python</code>版本的，当系统的<code>python</code>版本改变的时候，对应的<code>python</code>包和<code>django</code>框架可能出现兼容的问题，所以在开发的时候，我们一般会创建一个隔离的python虚拟环境，在虚拟环境里安装<code>django</code>和python包来工作。（虚拟环境还能方便的管理项目依赖的<code>python</code>包）</p></blockquote><h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span></pre></td></tr></table></figure><h3 id="安装虚拟环境扩展包"><a href="#安装虚拟环境扩展包" class="headerlink" title="安装虚拟环境扩展包"></a>安装虚拟环境扩展包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo pip3 install virtualenvwrapper</span></pre></td></tr></table></figure><p>安装虚拟环境扩展包的目的是使用更加简单的命令来管理虚拟环境</p><h3 id="配置虚拟环境"><a href="#配置虚拟环境" class="headerlink" title="配置虚拟环境"></a>配置虚拟环境</h3><p>修改用户家目录下的配置文件.bashrc，添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span></pre></td></tr></table></figure><p>使用<code>source .bashrc</code>命令使配置文件生效。<br>创建python3虚拟环境的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p python3 虚拟环境名称</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例如：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p python3 test1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这样就在用户家目录的.virtualenvs目录下创建了一个新的目录test1，test1下保存的就是虚拟环境</span></span></pre></td></tr></table></figure><p>查看当前有哪些虚拟环境，在终端输入workon，然后按3次tab键，或者输入workon加一个空格，然后按两下tab键<br><img src="1.png" alt="1.png"></p><p>使用某个虚拟环境的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">workon 虚拟环境名称</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">例如：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">workon test1</span></pre></td></tr></table></figure><p>删除虚拟环境，需要先退出再删除</p><ul><li>退出：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">deactivate</span></pre></td></tr></table></figure><ul><li>删除：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">rmvirtualenv test1</span></pre></td></tr></table></figure><ul><li>在虚拟环境中安装python包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">pip install 包名称</span></pre></td></tr></table></figure><blockquote><p>注意：在虚拟环境中安装python包不需要用sudo，否则会安装到主机里，而不是虚拟环境里</p></blockquote><ul><li>安装django</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">pip3 install django</span></pre></td></tr></table></figure><h2 id="创建django项目"><a href="#创建django项目" class="headerlink" title="创建django项目"></a>创建django项目</h2><h3 id="终端创建django项目"><a href="#终端创建django项目" class="headerlink" title="终端创建django项目"></a>终端创建django项目</h3><ul><li>创建django项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">django-admin startproject 项目名</span></pre></td></tr></table></figure><ul><li>创建应用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp app名</span></pre></td></tr></table></figure><blockquote><p>注意：使用终端创建的项目，需要手动把创建的应用名称写到setting.py文件的installed_apps配置项里</p></blockquote><ul><li>启动django开发服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span></pre></td></tr></table></figure><h3 id="pycharm创建django项目"><a href="#pycharm创建django项目" class="headerlink" title="pycharm创建django项目"></a>pycharm创建django项目</h3><p>新建django项目，选择解释器的时候，可以选择一个虚拟环境的python解释器的位置。如果虚拟环境没有django框架的话，会先安装django框架（这样安装django框架比较慢，不如直接在终端中启动虚拟环境然后安装django框架的速度快）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python下有许多款不同的 Web 框架。Django是重量级选手中最有代表性的一位。许多成功的网站和APP都基于Django。&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django form 组件</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-form-component/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-form-component/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T13:38:26.018Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> fields</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    username = fields.CharField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        min_length=<span class="number">6</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        max_length=<span class="number">16</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        error_messages=&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'required'</span>: <span class="string">'用户名不能为空'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'min_length'</span>: <span class="string">'不能少于6个字符'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'max_length'</span>: <span class="string">'不能超过16个字符'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    password = fields.CharField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        min_length=<span class="number">6</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        error_messages=&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'required'</span>: <span class="string">'密码不能为空'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'min_length'</span>: <span class="string">'不能少于6字符'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    email = fields.EmailField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        error_messages=&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'required'</span>: <span class="string">'邮箱不能为空'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'invalid'</span>: <span class="string">'邮箱格式错误'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    city = fields.ChoiceField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># choices=((0, 'beijing'), (1, '上海'),),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        widget=widgets.CheckboxSelectMultiple</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 加上这个方法，那么数据库里数据源修改之后，前台页面上的数据才会跟着修改</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, ** kwargs)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        super(CustomForm, self).__init__(*args, **kwargs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        self.fields[<span class="string">'city'</span>].widget.choices = models.UserInfo.objects.all().values_list(<span class="string">'id'</span>, <span class="string">'username'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 加上这个方法（以clean_字段名命名),可以自定义验证方式，比如去数据库看是否有重复的用户名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_user</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        v = self.cleaned_data[<span class="string">'user'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> models.UserInfo.objects.filter(username=v).count():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'用户名重复'</span>) <span class="comment"># 必须抛出Validationrror异常才能被捕获</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> v</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 加上这个方法，可以拿到Form所有的clean_data进行验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    print(self.cleaned_data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    v1 = self.cleaned_data[<span class="string">'user'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    v2 = self.cleaned_data[<span class="string">'gender'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    print(v1 == <span class="string">'1593'</span> <span class="keyword">and</span> v2 == <span class="string">'a'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> v1 == <span class="string">'1593'</span> <span class="keyword">and</span> v2 == <span class="string">'a'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'整体错误'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.cleaned_data</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">        obj = MyForm()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'obj'</span>: obj&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">        obj = MyForm(request.POST)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> obj.is_valid():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">            print(<span class="string">'验证成功'</span>, obj.cleaned_data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'main_page.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">            print(<span class="string">'验证失败'</span>, obj.errors)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'obj'</span>: obj&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_users</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">        user_form = UserForm()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'add_users.html'</span>, &#123;<span class="string">"userForm"</span>: user_form&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">        user_form = UserForm(request.POST)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> user_form.is_valid():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">            models.UserInfo.objects.create(**user_form.cleaned_data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'users.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'add_users.html'</span>, &#123;<span class="string">"userForm"</span>: user_form&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_users</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">        nid = request.GET.get(<span class="string">'nid'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">        data = models.UserInfo.objects.filter(id=nid).first()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">        obj = UserForm(&#123;<span class="string">'username'</span>: data.username, <span class="string">'email'</span>: data.email&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'edit_users.html'</span>, &#123;<span class="string">'obj'</span>: obj, <span class="string">'nid'</span>: nid&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">        nid = request.GET.get(<span class="string">'nid'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">        obj = UserForm(request.POST)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> obj.is_valid():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">            models.UserInfo.objects.filter(id=nid).update(**obj.cleaned_data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'users.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'edit_users.html'</span>, &#123;<span class="string">'obj'</span>: obj, <span class="string">'nid'</span>: nid&#125;)</span></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/index.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：</span><span class="template-variable">&#123;&#123; obj.username &#125;&#125;</span><span class="template-variable">&#123;&#123; obj.errors.username.0 &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：</span><span class="template-variable">&#123;&#123; obj.password &#125;&#125;</span><span class="template-variable">&#123;&#123; obj.errors.password.0 &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>email：</span><span class="template-variable">&#123;&#123; obj.email &#125;&#125;</span><span class="template-variable">&#123;&#123; obj.errors.email.0 &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></pre></td></tr></table></figure><h2 id="自定义正则"><a href="#自定义正则" class="headerlink" title="自定义正则"></a>自定义正则</h2><blockquote><p>方式1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomForm</span><span class="params">(forms.Form)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    user = fields.CharField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        error_messages=&#123;<span class="string">'invalid'</span>: <span class="string">'请输入以159开头的数字格式'</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        label=<span class="string">'user'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        validators=[RegexValidator(<span class="string">r'^[0-9]+$'</span>, <span class="string">'请输入数字'</span>), RegexValidator(<span class="string">r'^159[0-9]+$'</span>, <span class="string">'数字必须159开头'</span>)],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr></table></figure><blockquote><p>方式2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomForm2</span><span class="params">(forms.Form)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    user = fields.RegexField(<span class="string">r'^[0-9]&#123;10&#125;$'</span>, error_messages=&#123;<span class="string">'invalid'</span>: <span class="string">'please type numbers 10 times'</span>&#125;)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django模板</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-template/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-template/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T13:39:55.494Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>这里只介绍模板里的高级用法：自定义标签和过滤器</p><ol><li>在app下创建一个python包，须包含<code>__init__.py</code>文件<br><img src="django%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="django自定义标签和过滤器"></li><li>在包内建一个py文件，用来定义标签和过滤器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">register = template.Library()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod2</span><span class="params">(num1)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> num1 % <span class="number">2</span> == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod4</span><span class="params">(num1, num2)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> num1 % num2 == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod3</span><span class="params">(num1, num2, num3)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span></pre></td></tr></table></figure><ol start="3"><li>在html文件里的开头处，导入要用到的python包里的py文件</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">mod3</span> 1 3 5 %&#125;</span><span class="xml"> # 自定义标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> book.id|mod2 %&#125;</span><span class="xml"> # 自定义过滤器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; book.id|mod2 &#125;&#125;</span><span class="xml"> # 自定义过滤器</span></span></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>自定义过滤器可以传一个参数，这个参数就是django模板语言传过来的那个参数</li><li>也可以传两个参数，第一个是模板语言传过来的那个，第二个是自己传的。</li><li>自定义过滤器必须有返回值</li><li>自定义标签主要用作数据处理，不可以用在if判断。自定义过滤器可以在if判断里使用</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
      <category term="template" scheme="https://wangyangang.github.io/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>django分页</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-pagination/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-pagination/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T15:42:30.413Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="Paginator类实例对象"><a href="#Paginator类实例对象" class="headerlink" title="Paginator类实例对象"></a>Paginator类实例对象</h2><ul><li>方法<em>init</em>(列表,int)：返回分页对象，第一个参数为列表数据，第二个参数为每页数据的条数。</li><li>属性count：返回对象总数。</li><li>属性num_pages：返回页面总数。</li><li>属性page_range：返回页码列表，从1开始，例如[1, 2, 3, 4]。</li><li>方法page(m)：返回Page类实例对象，表示第m页的数据，下标以1开始。</li></ul><h2 id="Page类实例对象"><a href="#Page类实例对象" class="headerlink" title="Page类实例对象"></a>Page类实例对象</h2><ul><li>调用Paginator对象的page()方法返回Page对象，不需要手动构造。</li><li>属性object_list：返回当前页对象的列表。</li><li>属性number：返回当前是第几页，从1开始。</li><li>属性paginator：当前页对应的Paginator对象。</li><li>方法has_next()：如果有下一页返回True。</li><li>方法has_previous()：如果有上一页返回True。</li><li>方法len()：返回当前页面对象的个数。</li></ul><p>示例：views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> AreaInfo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数pIndex表示：当前要显示的页码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_test</span><span class="params">(request,pIndex)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#查询所有的地区信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    list1 = AreaInfo.objects.filter(aParent__isnull=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#将地区信息按一页10条进行分页</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    p = Paginator(list1, <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#如果当前没有传递页码信息，则认为是第一页，这样写是为了请求第一页时可以不写页码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> pIndex == <span class="string">''</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        pIndex = <span class="string">'1'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#通过url匹配的参数都是字符串类型，转换成int类型</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    pIndex = int(pIndex)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#获取第pIndex页的数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    list2 = p.page(pIndex)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#获取所有的页码信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    plist = p.page_range</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#将当前页码、当前页的数据、页码信息传递到模板中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'booktest/page_test.html'</span>, &#123;<span class="string">'list'</span>: list2, <span class="string">'plist'</span>: plist, <span class="string">'pIndex'</span>: pIndex&#125;)</span></pre></td></tr></table></figure><p>urls.py配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^page(?P&lt;pIndex&gt;[0-9]*)/$'</span>, views.page_test),</span></pre></td></tr></table></figure><p>前端显示:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>分页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">显示当前页的地区信息：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#123;%for area in list%&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;area.id&#125;&#125;--&#123;&#123;area.atitle&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#123;%endfor%&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">显示页码信息：当前页码没有链接，其它页码有链接<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#123;%for pindex in plist%&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#123;%if pIndex == pindex%&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#123;&#123;pindex&#125;&#125;&amp;nbsp;&amp;nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#123;%else%&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page&#123;&#123;pindex&#125;&#125;/"</span>&gt;</span>&#123;&#123;pindex&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp;&amp;nbsp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#123;%endif%&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#123;%endfor%&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django提供了数据分页的类，这些类被定义在django/core/paginator.py中。 类Paginator用于对列进行一页n条数据的分页运算。类Page用于表示第m页的数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Gist</title>
    <link href="https://wangyangang.github.io/2019/12/08/gist/"/>
    <id>https://wangyangang.github.io/2019/12/08/gist/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T14:25:59.180Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="向前端返回json格式的数据"><a href="#向前端返回json格式的数据" class="headerlink" title="向前端返回json格式的数据"></a>向前端返回json格式的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_house_index</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        ret = redis_store.get(<span class="string">'home_page_data'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        current_app.logger.error(e)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        ret = <span class="literal">None</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> ret:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        current_app.logger.info(<span class="string">'hit house index info redis'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;"errno": 0, "errmsg": "OK", "data": %s&#125;'</span> % ret, <span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span></pre></td></tr></table></figure><h2 id="django中ajax的使用"><a href="#django中ajax的使用" class="headerlink" title="django中ajax的使用"></a>django中ajax的使用</h2><p><strong>post：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> new_session_value = $(<span class="string">'#new_session_value'</span>).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      &#123;#var args = &#123;'name': new_session_value, 'csrfmiddlewaretoken': csrf&#125;;#&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> args = &#123;<span class="attr">name</span>: new_session_value&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> json_args = <span class="built_in">JSON</span>.stringify(args);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(json_args);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      $.ajax(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            url: <span class="string">'/app01/sessions/'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            type: <span class="string">'post'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            data: json_args,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#123;#contentType:'application/json',#&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            dataType: <span class="string">'json'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            headers:&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">              <span class="string">'X-CSRFTOKEN'</span>: csrf</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                  <span class="keyword">var</span> resno = data[<span class="string">'resno'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                  <span class="keyword">if</span>(resno == <span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">var</span> val = data[<span class="string">'name'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                    $(<span class="string">'#session_value'</span>).val(val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(resno == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                    $(<span class="string">'#session_value'</span>).val(data[<span class="string">'errmsg'</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><ul><li>url地址前要有 “/“</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">'/order/pay'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>), '<span class="title">json</span>')</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">  ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function">// 以下是<span class="title">jquery</span>中<span class="title">ajax</span> <span class="title">post</span>的部分定义：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">// jQuery[ method ] = function( url, data, callback, type ) &#123;&#125;</span></pre></td></tr></table></figure><h3 id="关于ajax的csrf验证："><a href="#关于ajax的csrf验证：" class="headerlink" title="关于ajax的csrf验证："></a>关于ajax的csrf验证：</h3><ul><li>传的数据不是json，那么可以把<code>csrfmiddlewaretoken</code>作为键放到参数里</li><li>传的数据是json，不能把<code>csrfmiddlewaretoken</code>放到参数里，放进去也不起作用。只能用ajax的常规写法，把<code>csrf</code>放到请求头里。</li><li>后台获取json数据，用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">json_body = json.loads(request.body)</span></pre></td></tr></table></figure>获取单个数据也可以用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">name = request.POST.get(<span class="string">'name'</span>)</span></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="gist" scheme="https://wangyangang.github.io/categories/gist/"/>
    
    
      <category term="gist" scheme="https://wangyangang.github.io/tags/gist/"/>
    
  </entry>
  
  <entry>
    <title>django视图</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-view/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-view/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T13:07:04.051Z</updated>
    
    <content type="html"><![CDATA[<p>视图就是python中的函数，视图一般被定义在”应用/views.py”文件中，此例中为”booktest/views.py”文件。视图必须返回一个HttpResponse对象或子对象作为响应。响应可以是一张网页的HTML内容，一个重定向，一个404错误等。</p><a id="more"></a><!-- toc --><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>项目的urls.py文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    re_path(<span class="string">r'^app01/'</span>, include((<span class="string">'app01.urls'</span>, <span class="string">'app01'</span>), namespace=<span class="string">'app01'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><ul><li>应用的urls.py文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> IndexView, BookInfoListView</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    re_path(<span class="string">r'^index'</span>, IndexView.as_view(), name=<span class="string">'index'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    re_path(<span class="string">r'^books'</span>, BookInfoListView.as_view(template_name=<span class="string">'books.html'</span>), name=<span class="string">'books'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><ul><li>位置参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^delete(\d+)/$'</span>,views.show_arg),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_arg</span><span class="params">(request,id)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'show arg %s'</span>%id)</span></pre></td></tr></table></figure><ul><li>关键字参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^delete(?P&lt;id1&gt;\d+)/$'</span>,views.show_arg),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_arg</span><span class="params">(request,id1)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'show %s'</span>%id1)</span></pre></td></tr></table></figure><blockquote><p>注意：视图show_arg此时必须要有一个参数名为id1，否则报错。</p></blockquote><h2 id="类视图-CBV模式"><a href="#类视图-CBV模式" class="headerlink" title="类视图(CBV模式)"></a>类视图(CBV模式)</h2><h3 id="基本视图"><a href="#基本视图" class="headerlink" title="基本视图"></a>基本视图</h3><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><blockquote><p>类django.views.generic.base.View，一般用作根据不同的请求方式调用不同的函数（get，post等）</p></blockquote><p>示例views.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> views</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(View)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'index page'</span>)</span></pre></td></tr></table></figure><p>示例urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^index'</span>, IndexView.as_view(), name=<span class="string">'index'</span>)</span></pre></td></tr></table></figure><h4 id="TemplateView"><a href="#TemplateView" class="headerlink" title="TemplateView"></a>TemplateView</h4><p>类django.views.generic.base.TemplateView</p><blockquote><p>渲染一个给定的模板,其上下文包含从URL捕获的参数<br>示例views.py：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> TemplateView</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoListView</span><span class="params">(TemplateView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    template_name = <span class="string">'books.html'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        books = BookInfo.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        context = super().get_context_data(**kwargs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        context[<span class="string">'books'</span>] = books</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> context</span></pre></td></tr></table></figure><p>示例urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># re_path(r'^books', BookInfoListView.as_view(template_name='books.html'), name='books'),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   re_path(<span class="string">r'^books'</span>, BookInfoListView.as_view(), name=<span class="string">'books'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   ]</span></pre></td></tr></table></figure><blockquote><p>注意：如果在url的TemplateView的as_view函数里，传了template_name参数，那么TemplateView类里，可以不给template_name字段赋值；<br>如果url没传该参数，那么Template_View类里必须赋值，否则会报错.</p></blockquote><h4 id="RedirectView"><a href="#RedirectView" class="headerlink" title="RedirectView"></a>RedirectView</h4><hr><h3 id="通用的显示视图"><a href="#通用的显示视图" class="headerlink" title="通用的显示视图"></a>通用的显示视图</h3><h4 id="列表视图（ListView）"><a href="#列表视图（ListView）" class="headerlink" title="列表视图（ListView）"></a>列表视图（ListView）</h4><h5 id="显示对象的一个列表（一般用ListView的子类）"><a href="#显示对象的一个列表（一般用ListView的子类）" class="headerlink" title="显示对象的一个列表（一般用ListView的子类）"></a>显示对象的一个列表（一般用ListView的子类）</h5><blockquote><p>视图里定义一个集成ListView的视图，并指定model</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoListView2</span><span class="params">(ListView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    model = BookInfo</span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^books/'</span>, BookInfoListView2.as_view(), name=<span class="string">'books'</span>),</span></pre></td></tr></table></figure><blockquote><p>我们可以通过向视图中添加template_name属性来明确地告诉视图使用哪个模板，或者在url里写明模板名称:<code>BookInfoListView2.as_view(template_name=&#39;abc.html&#39;)</code>.但是如果没有显式模板，Django会从对象的名称中推断出一个模板。 在这种情况下，推断的模板将为”app01/bookinfo_list.html” - “app01”部分来自定义模型的应用程序名称，而“bookinfo”是小写的模型名称。</p></blockquote><blockquote><p>这个模板将会依据于一个上下文来渲染，这个上下文包含一个名为object_list包含所有publisher对象的变量 :</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> book <span class="keyword">in</span> object_list %&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> book.id|mod2 %&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; book.id &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; book.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></pre></td></tr></table></figure><p>以上就是一个最简单的对象的通用视图</p><ul><li>制作友好模板上下文</li></ul><blockquote><p>在视图里添加context_object_name字段，以后模板在使用时，就可以访问该字段来取数据了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoListView2</span><span class="params">(ListView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    model = BookInfo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    context_object_name = <span class="string">'book_list'</span></span></pre></td></tr></table></figure><h5 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h5><blockquote><p>我们只给类视图的model赋值，相当于：<code>queryset = BookInfo.objects.all()</code>.相当于取出所有的数据，如果想对数据进行过滤，可以给queryset字段赋值</p></blockquote><h6 id="后台过滤"><a href="#后台过滤" class="headerlink" title="后台过滤"></a>后台过滤</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoList</span><span class="params">(ListView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    queryset = BookInfo.objects.filter(name=<span class="string">'三国演义'</span>)</span></pre></td></tr></table></figure><h6 id="动态过滤（根据url参数过滤）（一般用DetailView的子类）"><a href="#动态过滤（根据url参数过滤）（一般用DetailView的子类）" class="headerlink" title="动态过滤（根据url参数过滤）（一般用DetailView的子类）"></a>动态过滤（根据url参数过滤）（一般用DetailView的子类）</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url(<span class="string">r'^authors/(?P&lt;pk&gt;[0-9]+)/$'</span>, AuthorDetailView.as_view(), name=<span class="string">'author-detail'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><blockquote><p>pk是主键的意思，这样就根据数据库中的id列进行过滤，url正则分组名必须叫pk才能根据id进行筛选。这样在url里写好后，后台得到的数据，就是根据pk值进行过滤之后的数据了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    url(<span class="string">r'^(?P&lt;slug&gt;[-\w]+)/$'</span>, ArticleDetailView.as_view(), name=<span class="string">'article-detail'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><blockquote><p>这里的slug，是数据库里的字段名，该字段一般作为博客文章的静态名称存在。也必须叫这个名字，不能更改，数据库没有这个slug字段，就会报错。</p></blockquote><h5 id="执行额外的操作（比如更新last-accessed字段）"><a href="#执行额外的操作（比如更新last-accessed字段）" class="headerlink" title="执行额外的操作（比如更新last_accessed字段）"></a>执行额外的操作（比如更新last_accessed字段）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetailView</span><span class="params">(DetailView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    queryset = Author.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># Call the superclass</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        object = super(AuthorDetailView, self).get_object()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># Record the last accessed date</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        object.last_accessed = timezone.now()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        object.save()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># Return the object</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> object</span></pre></td></tr></table></figure><h4 id="详细视图（DetailView）"><a href="#详细视图（DetailView）" class="headerlink" title="详细视图（DetailView）"></a>详细视图（DetailView）</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;视图就是python中的函数，视图一般被定义在”应用/views.py”文件中，此例中为”booktest/views.py”文件。视图必须返回一个HttpResponse对象或子对象作为响应。响应可以是一张网页的HTML内容，一个重定向，一个404错误等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="https://wangyangang.github.io/2019/12/08/index/"/>
    <id>https://wangyangang.github.io/2019/12/08/index/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T14:12:10.206Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><ul><li>一个年轻人要成长必须过两关：<ul><li>第一，跟优秀的老年人聊天</li><li>第二，谈一场或成功或失败的轰轰烈烈的恋爱<br>– 木心（白岩松某演讲）   2019-07-20</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="index" scheme="https://wangyangang.github.io/categories/index/"/>
    
    
      <category term="index" scheme="https://wangyangang.github.io/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>django-admin的使用</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-admin/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-admin/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T13:21:41.518Z</updated>
    
    <content type="html"><![CDATA[<p>django-admin是一个用来管理django站点后台数据库的应用，是django自带的。<br>我们用pycharm创建django应用的时候，默认就把admin这个应用加入到settngs.py的installed app里了。</p><a id="more"></a><!-- toc --><p><strong>localhost:port/admin</strong> 是Django框架管理数据库的界面</p><ul><li>创建超级用户</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python3 manage.py createsuperuser <span class="comment"># 创建管理员账户</span></span></pre></td></tr></table></figure><ul><li>自定义admin界面的显示内容</li></ul><blockquote><p>要想管理数据库，要把模型类注册进去<br>  配置<code>admin.py</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    list_display=(<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'price'</span>)  <span class="comment"># book表显示哪些字段</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    list_editable=(<span class="string">'name'</span>,<span class="string">'price'</span>)      <span class="comment"># book表哪些字段可编辑</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    filter_horizontal = (<span class="string">'author'</span>,)     <span class="comment"># 编辑book的时候，作者以水平方向进行展示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    list_per_page = <span class="number">4</span>                   <span class="comment"># 每页显示的记录个数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># filter_vertical = ('author',)     # 编辑book的时候，作者以水平方向进行展示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    search_fields = (<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'publish__name'</span>)    <span class="comment"># 搜索框可以进行哪些字段的搜索</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    list_filter = (<span class="string">'pub_date'</span>, <span class="string">'publish'</span>)   <span class="comment"># 指定列表过滤器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    ordering = (<span class="string">'price'</span>,)   <span class="comment"># 根据什么来默认排序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    fieldsets = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'name'</span>]&#125;),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        (<span class="string">'show all'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'price'</span>, <span class="string">'publish'</span>, <span class="string">'author'</span>], <span class="string">'classes'</span>: [<span class="string">'collapse'</span>]&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    ]   <span class="comment"># 在编辑book的时候，默认只显示name，price和publish折叠</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">admin.site.register(models.Book,BookAdmin)  <span class="comment"># Book表可在admin中管理，且自定义book的显示方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">admin.site.register(models.Publish) <span class="comment"># Publish表可在admin中管理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">admin.site.register(models.Author)  <span class="comment"># Author表可在admin中管理</span></span></pre></td></tr></table></figure><h2 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h2><ol><li>更改admin页面的语言和时区,在setting.py里更改如下内容：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans`</span></span></pre></td></tr></table></figure><ol start="2"><li>更改admin页面显示的app的名称,在应用的apps.py里加上verbose_name</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App01Config</span><span class="params">(AppConfig)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    name = <span class="string">'app01'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    verbose_name = <span class="string">'博客'</span></span></pre></td></tr></table></figure><p>在app目录下的<strong>init</strong>.py里加上default_app_config</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">default_app_config = <span class="string">'app01.apps.App01Config'</span></span></pre></td></tr></table></figure><ol start="3"><li>利用model的Meta类，改变模型在admin界面的显示</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   db_table = <span class="string">'book_info'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   verbose_name = <span class="string">'书籍'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   verbose_name_plural = <span class="string">'许多书籍'</span></span></pre></td></tr></table></figure><ol start="4"><li>要想在admin界面管理哪个model，就要把它注册到admin里。也可以继承admin.ModelAdmin进行自定义.在admin.py里：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'comment'</span>] <span class="comment"># BookInfo类在后台显示哪几个字段</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django-admin是一个用来管理django站点后台数据库的应用，是django自带的。&lt;br&gt;我们用pycharm创建django应用的时候，默认就把admin这个应用加入到settngs.py的installed app里了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
      <category term="admin" scheme="https://wangyangang.github.io/tags/admin/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="https://wangyangang.github.io/2019/12/08/python-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/python-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T13:40:56.436Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="1-三元运算"><a href="#1-三元运算" class="headerlink" title="1.三元运算"></a>1.三元运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">result = A <span class="keyword">if</span> B <span class="keyword">else</span> C  <span class="comment"># 如果B成立，则result等于A，否则result等于C</span></span></pre></td></tr></table></figure><h2 id="2-ajax基本操作"><a href="#2-ajax基本操作" class="headerlink" title="2.ajax基本操作"></a>2.ajax基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$.ajax(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    url:<span class="string">'/index/'</span>，</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    type:<span class="string">'GET'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    data:&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    success:function(arg)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">#   回调函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;   <span class="comment">#   ajax以GET方式发请求，会自动把data里的数据放到url里；以POST方式发，data会自动放到请求体里</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><blockquote><p>ajax发请求(计算两个数字的和)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"i1"</span> <span class="attr">placeholder</span>=<span class="string">"数字1"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"i2"</span> <span class="attr">placeholder</span>=<span class="string">"数字2"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"addForm();"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            提交</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"i3"</span> <span class="attr">placeholder</span>=<span class="string">"结果"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addForm</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">           <span class="keyword">var</span> v1=$(<span class="string">'#i1'</span>).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">           <span class="keyword">var</span> v2=$(<span class="string">'#i2'</span>).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">           $.ajax(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">               url:<span class="string">'/ajax3.html'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">               type:<span class="string">'GET'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">               data:&#123;<span class="string">'v1'</span>:v1,<span class="string">'v2'</span>:v2&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">               success:<span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                  $('#i3').val(arg) # arg就是计算结果</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">           &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">def ajax3(request):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    v1 = request.GET.get(<span class="string">'v1'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    v2 = request.GET.get(<span class="string">'v2'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        v3 = int(v1)+int(v2)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    except Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        v3 = <span class="string">'输入格式错误'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    return HttpResponse(v3) # 把计算结果传给回调函数</span></pre></td></tr></table></figure><hr><blockquote><p>另一个小例子</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        $(function()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            bindEvent()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            bindSave()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        function bindEvent() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            $(<span class="string">'#btnAdd'</span>).click(function () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                $(<span class="string">"#addModal"</span>).modal(<span class="string">'show'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        function bindSave() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            $(<span class="string">'#btnSave'</span>).click(function () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                let result = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                $(<span class="string">'#studentForm'</span>).find(<span class="string">'input,select'</span>).each(function()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                    let v= $(this).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                    let n=$(this).attr(<span class="string">'name'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(n==<span class="string">'gender'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">if</span>($(this).prop(<span class="string">'checked'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                            result[n] = v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                        result[n]=v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                console.log(result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                $.ajax(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                    url:<span class="string">'/add_student/'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                    type:<span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                    data:result,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                    success:function (args) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                        let dict = JSON.parse(args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">if</span>(dict.status)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                            <span class="comment"># 通过js主动刷新页面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                            window.location.reload();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                            $(<span class="string">'#errorMSG'</span>).text(dict.message)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    &lt;/script&gt;</span></pre></td></tr></table></figure><h2 id="3-序列化"><a href="#3-序列化" class="headerlink" title="3.序列化"></a>3.序列化</h2><ol><li>python序列化</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">字符串 = json.dumps(对象)   对象-&gt;字符串</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">对象 = json.loads(字符串)   字符串-&gt;对象</span></pre></td></tr></table></figure><ol start="2"><li>javascript序列化</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">字符串 = JSON.string.ify(对象)   对象-&gt;字符串</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">对象 = JSON.parse(字符串)   字符串-&gt;对象</span></pre></td></tr></table></figure><h2 id="4-事件委托"><a href="#4-事件委托" class="headerlink" title="4.事件委托"></a>4.事件委托</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$(<span class="string">'要绑定标签的上级标签'</span>).on(<span class="string">'click'</span>,<span class="string">'要绑定的标签'</span>,function()&#123;&#125;)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://wangyangang.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://wangyangang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>初识爬虫</title>
    <link href="https://wangyangang.github.io/2019/12/08/spider-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/spider-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T13:41:06.081Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><ul><li>把网页的照片保存</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">response = requests.get(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    url=<span class="string">'https://movie.douban.com/chart'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">response.encoding = response.apparent_encoding  <span class="comment"># 根据来源网站的编码方式进行解码,一般不需要</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(response.text, features=<span class="string">'html.parser'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">target = soup.find(id=<span class="string">'content'</span>)  <span class="comment"># 根据id找标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">tables = target.find_all(<span class="string">'table'</span>) <span class="comment"># 根据类型找标签.也可以组合查:soup.find('div',id='abc')</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> tb <span class="keyword">in</span> tables:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> tb:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        a_tags = tb.find_all(<span class="string">'a'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> a_tag <span class="keyword">in</span> a_tags:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            title = a_tag.attrs.get(<span class="string">'title'</span>)  <span class="comment"># 用attrs来获取属性;用.text来获取文本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> title:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                img = a_tag.find(<span class="string">'img'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                file_path = img.attrs.get(<span class="string">'src'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                img_response = requests.get(url=file_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                print(title, file_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">with</span> open(title+<span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                    f.write(img_response.content)</span></pre></td></tr></table></figure><h2 id="爬虫requests"><a href="#爬虫requests" class="headerlink" title="爬虫requests"></a>爬虫requests</h2><blockquote><h2 id="1-参数"><a href="#1-参数" class="headerlink" title="1. 参数"></a>1. 参数</h2></blockquote><ul><li>requests.request</li><li>method:提交方式</li><li>url:    提交地址</li><li>headers:请求头.里面有个referer,是上次访问的网站</li><li>cookies:放在请求头里</li><li>files：在请求体里上传文件</li><li>params: 在url中传递的参数，GET</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">request.request(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    method=<span class="string">'GET'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url=<span class="string">'http://abc.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    params=&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><ul><li>data  在请求体里传里数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">request.request(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    method=<span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url=<span class="string">'http://abc.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    params=&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    data=&#123;<span class="string">'user'</span>:<span class="string">'alex'</span>,<span class="string">'pwd'</span>:<span class="string">'123'</span>&#125;    <span class="comment"># 或者data="user=alex&amp;pwd=123"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><ul><li>json 在请求体里传递数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">request.request(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    method=<span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url=<span class="string">'http://abc.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    params=&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    json=&#123;<span class="string">'user'</span>:<span class="string">'alex'</span>,<span class="string">'pwd'</span>:<span class="string">'123'</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://wangyangang.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://wangyangang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Django Cookie Session 操作</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-cookie-session/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-cookie-session/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T13:39:27.590Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    is_login = request.COOKIES.get(<span class="string">'is_login'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> is_login:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> username == <span class="string">'wyg'</span> <span class="keyword">and</span> password == <span class="string">'wyg'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            ret = redirect(<span class="string">'/index/'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            ret.set_cookie(<span class="string">'is_login'</span>, <span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="comment"># ret.set_cookie('is_login',True,max_age=10)# 有效期10秒</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="comment"># ret.set_cookie('is_login',True,expires=datetime.datetime.utcnow()+datetime.timedelta(days=3)) # 3天有效期</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> ret</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">is_login = request.COOKIES.get(<span class="string">'is_login'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> is_login:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/login/'</span>)</span></pre></td></tr></table></figure><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote><p>session在django用的时候可能会出问题，这时候，把settings.py里的MIDDLEWARE_CLASS改为MIDDLEWARE，把</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span></span></pre></td></tr></table></figure><p>注释掉。session在服务器默认保存15天</p><ul><li>获取session: request.session[key]</li><li>设置session: request.session[key]=value</li><li>删除session: del request.session[key]<br>（这个删除其实是把session_data更新为一个其他的值了，并没有立即删除）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
      <category term="cookie" scheme="https://wangyangang.github.io/tags/cookie/"/>
    
      <category term="session" scheme="https://wangyangang.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>django rest_framework</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-rest-framework/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-rest-framework/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T16:12:06.160Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>认证需要有一个认证类，继承 <code>BaseAuthenticatio</code>,其中由两个方法 <code>authenticate</code> 和 <code>authenticate_header</code>.认证成功后在 <code>authenticate</code> 方法里返回用户，这样在 <code>request</code> 里就有了user属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthenticatio</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> restdemo.models <span class="keyword">import</span> Token, User</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAuthentication</span><span class="params">(BaseAuthentication)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        token = request.GET.get(<span class="string">'token'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            token_info = Token.objects.get(token=token)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'认证失败'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> token_info:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                user = User.objects.get(token_obj=token_info)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                ret = (user, token_info)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> ret</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">except</span> Exception:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'认证失败'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'认证失败'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span><span class="params">(self, val)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">pass</span></span></pre></td></tr></table></figure><p>使用自定义的认证类有两种方法</p><ol><li>在settings.py里配置.这样每个视图类都会经过该认证。如果某个类不想被认证，可以在类里加一个字段： <code>authentication_classes = []</code> 即可。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>: [<span class="string">'utils.authentications.MyAuthentication'</span>,]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ol><li>直接引用，然后在试图函数里把认证类赋值给视图属性的 <code>authentication_classes</code> 字段</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyAuthentication <span class="keyword">from</span> my_authentication.py</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIVie</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(APIView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    authentication_classes = [MyAuthentication]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">pass</span></span></pre></td></tr></table></figure><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>权限 <code>permission</code> 和认证 <code>authentication</code> 差不多，<br>配置节点是 <code>DEFAULT_PERMISSION_CLASSES</code> ,<br>可以继承 <code>BasePermission</code> ,必须实现 <code>has_permission</code> 方法，返回 <code>True</code> 代表有权限，发挥 <code>False</code> 代表没有权限</p><h2 id="访问频率控制"><a href="#访问频率控制" class="headerlink" title="访问频率控制"></a>访问频率控制</h2><p>配置节点是 <code>DEFAULT_THROTTLE_CLASSES</code>，<br>可以继承 <code>BaseThrottle</code>,<br>必须实现<code>allow_request</code>方法<br>其内部实现是一下思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThrottle</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        self.history = <span class="literal">None</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self, request, view)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        remote_addr = request.META.get(<span class="string">'REMOTE_ADDR'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        ctime = time.time()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> remote_addr <span class="keyword">not</span> <span class="keyword">in</span> VISIT_RECORD:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            VISIT_RECORD[remote_addr] = [ctime, ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        history = VISIT_RECORD[remote_addr]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        self.history = history</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> history <span class="keyword">and</span> history[<span class="number">-1</span>] &lt; ctime - <span class="number">10</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            history.pop()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> len(history) &lt; <span class="number">3</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            history.insert(<span class="number">0</span>, ctime)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"""</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="string">        还需要等多少秒才能访问</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="string">        :return:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="string">        """</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        ctime = time.time()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># 剩余多少秒</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        rest_time = <span class="number">10</span> - (ctime - self.history[<span class="number">-1</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        print(ctime)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> rest_time</span></pre></td></tr></table></figure><p>我们不需要自己写算法，只需要继承SimpleRateThrottle即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThrottle</span><span class="params">(SimpleRateThrottle)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    scope = <span class="string">'wyg'</span> <span class="comment"># 这是配置文件里DEFAULT_THROTTLE_RATES节点队友的值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.get_ident(request) <span class="comment"># 获取django默认缓存的key，默认get_ident是根据ip进行限制访问次数</span></span></pre></td></tr></table></figure><p>settings.py配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"DEFAULT_THROTTLE_CLASSES"</span>: [<span class="string">'utils.throttles.MyThrottle'</span>, ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"DEFAULT_THROTTLE_RATES"</span>: &#123;<span class="string">'wyg'</span>: <span class="string">'3/m'</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><h3 id="通过URL参数"><a href="#通过URL参数" class="headerlink" title="通过URL参数"></a>通过URL参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> QueryParameterVersioning</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过URL参数传递版本: api/user?version=v1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给视图类的version_class赋值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">version_class= QueryParameterVersioning</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用的时候需要在settings.py里加上配置节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本</span></span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">"DEFAULT_VERSION"</span>: <span class="string">'v1'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">'ALLOWED_VERSIONS'</span>: [<span class="string">'v1'</span>, <span class="string">'v2'</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">"VERSION_PARAM"</span>: <span class="string">'version'</span></span></pre></td></tr></table></figure><h3 id="通过URL路径"><a href="#通过URL路径" class="headerlink" title="通过URL路径"></a>通过URL路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过URL路径传递版本: api/v1/user **推荐使用**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用的时候url要这样配置：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># re_path(r'^api/(?P&lt;version&gt;[v1|v2]+)/students$', StudentView.as_view(), name='students2'),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给视图类的version_class赋值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> URLPathVersioning</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">version_class = URLPathVersioning</span></pre></td></tr></table></figure><p>在 <code>request.version</code> 可得到版本信息</p><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FormParser, JSONParser</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView</span><span class="params">(APIView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    parser_classes = [JSONParser, FormParser]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 通过request.data取数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> HttpResponse(request.data[<span class="string">'name'</span>])</span></pre></td></tr></table></figure><p>可通过 <code>DEFAULT_PARSER_CLASSES</code> 进行全局配置</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>对queryset进行序列化<br>老方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">roles = Role.objects.all().values(<span class="string">'id'</span>,<span class="string">'name'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ret = json.dumps(list(roles))</span></pre></td></tr></table></figure><p>使用序列化：</p><h3 id="继承serializers-Serializer"><a href="#继承serializers-Serializer" class="headerlink" title="继承serializers.Serializer"></a>继承serializers.Serializer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    title = models.CharField(<span class="string">'角色名称'</span>, max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    title = models.CharField(<span class="string">'组名'</span>, max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    USER_TYPE = (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        (<span class="number">1</span>, <span class="string">'普通用户'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        (<span class="number">2</span>, <span class="string">'VIP用户'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    username = models.CharField(<span class="string">'用户名'</span>, max_length=<span class="number">20</span>, unique=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    password = models.CharField(<span class="string">'密码'</span>, max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    type = models.PositiveIntegerField(<span class="string">'用户类型'</span>, choices=USER_TYPE)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    role = models.ManyToManyField(to=Role)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    group = models.ForeignKey(Group, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    username = serializers.CharField()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    user_type = serializers.CharField(source=<span class="string">'type'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    user_type_display = serializers.CharField(source=<span class="string">'get_type_display'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    group = serializers.CharField(source=<span class="string">'group.title'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    role = serializers.SerializerMethodField()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_role</span><span class="params">(self, row)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        row_object_list = row.role.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        ret = []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> row_object_list:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            ret.append(&#123;<span class="string">'id'</span>: item.id, <span class="string">'title'</span>: item.title&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> ret</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView</span><span class="params">(APIView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        users = User.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        ret = UserSerializer(instance=users, many=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        ret = json.dumps(ret.data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> HttpResponse(ret)</span></pre></td></tr></table></figure><h3 id="继承serializers-ModelSerializer"><a href="#继承serializers-ModelSerializer" class="headerlink" title="继承serializers.ModelSerializer"></a>继承serializers.ModelSerializer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer2</span><span class="params">(serializers.ModelSerializer)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    user_type = serializers.CharField(source=<span class="string">'type'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    group = serializers.CharField(source=<span class="string">'group.title'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    role = serializers.SerializerMethodField()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        model = User</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># 需要把用到的所有字段都写上。从数据库取出来直接用的字段，不需要在类的字段里定义，需要做处理的可以写在类的字段里，并写在Meta的fields里。这样比使用默认serializer省事。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'user_type'</span>, <span class="string">'group'</span>, <span class="string">'role'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_role</span><span class="params">(self, row)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        ret = []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        roles = row.role.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> role <span class="keyword">in</span> roles:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            ret.append(&#123;<span class="string">'id'</span>: role.id, <span class="string">'title'</span>: role.title&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret</span></pre></td></tr></table></figure><h3 id="最简单的就是下面："><a href="#最简单的就是下面：" class="headerlink" title="最简单的就是下面："></a>最简单的就是下面：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        model = User</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        fields = <span class="string">'__all__'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        depth = <span class="number">1</span> <span class="comment"># depth代表层数</span></span></pre></td></tr></table></figure><h3 id="还可以生成链接"><a href="#还可以生成链接" class="headerlink" title="还可以生成链接"></a>还可以生成链接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^api/group/(?P&lt;pk&gt;\d+)$'</span>, GroupView.as_view(), name=<span class="string">'gp'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer3</span><span class="params">(serializers.ModelSerializer)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    group = serializers.HyperlinkedIdentityField(view_name=<span class="string">'gp'</span>, lookup_url_kwarg=<span class="string">'pk'</span>, lookup_field=<span class="string">'group_id'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        model = User</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'group'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样在返回数据的时候，字段group会生成一个url，根据url传进来的pk值进行拼接</span></span></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoleSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    title = serializers.CharField(error_messages=&#123;<span class="string">'required'</span>: <span class="string">'title不能为空'</span>&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoleView</span><span class="params">(APIView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        ser = RoleSerializer(data=request.data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> ser.is_valid():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            print(ser.validated_data[<span class="string">'title'</span>])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            print(ser.errors)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'role api'</span>)</span></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="使用rest-framework-PageNumberPagination"><a href="#使用rest-framework-PageNumberPagination" class="headerlink" title="使用rest_framework.PageNumberPagination"></a>使用rest_framework.PageNumberPagination</h3><p>在配置文件里定义每页显示几条<br><code>&quot;PAGE_SIZE&quot;: 3</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        model = Role</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        fields = <span class="string">'__all__'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PagerView</span><span class="params">(APIView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        roles = Role.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        pg = PageNumberPagination()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        page_roles = pg.paginate_queryset(queryset=roles, request=request, view=self)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        ser = PageSerializer(instance=page_roles, many=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> Response(ser.data) <span class="comment"># 用rest_framework的response可以直接返回，并且可以在浏览器预览数据，格式比较美观</span></span></pre></td></tr></table></figure><blockquote><p>还可以直接用 <code>PageNumberPagination</code> 对象返回：<br><code>return pg.get_paginated_response(ser.data)</code><br>这样的返回数据包含：总共有多少条数据，上一页的 <code>url</code> 和下一页的 <code>url</code></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"count"</span>: <span class="number">7</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"next"</span>: <span class="string">"http://127.0.0.1:8000/api/pages?page=3"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"previous"</span>: <span class="string">"http://127.0.0.1:8000/api/pages"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">"results"</span>: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="attr">"id"</span>: <span class="number">3</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="attr">"title"</span>: <span class="string">"校长"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="attr">"id"</span>: <span class="number">4</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="attr">"title"</span>: <span class="string">"班长"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><code>url</code>：<br><code>url: api/pages</code><br>默认显示第一页，可以通过 <code>page</code> 参数指定显示的页码<br><code>url: api/pages?page=2</code></p><h4 id="继承PageNumberPagination进行自定义"><a href="#继承PageNumberPagination进行自定义" class="headerlink" title="继承PageNumberPagination进行自定义"></a>继承PageNumberPagination进行自定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPageNumberPagination</span><span class="params">(PageNumberPagination)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    page_size_query_param = <span class="string">'size'</span> <span class="comment"># 配置可通过url传递每页显示几条数据的参数名 http://127.0.0.1:8000/api/pages?page=1&amp;size=4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    page_size = <span class="number">2</span>  <span class="comment"># 每页显示几条</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    max_page_size = <span class="number">5</span>  <span class="comment"># 每页最多显示几条</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    page_query_param = <span class="string">'page'</span>   <span class="comment"># 请求第几页的时候，url里使用的参数名</span></span></pre></td></tr></table></figure><h3 id="使用rest-framework的LimitOffsetPagination"><a href="#使用rest-framework的LimitOffsetPagination" class="headerlink" title="使用rest_framework的LimitOffsetPagination"></a>使用rest_framework的LimitOffsetPagination</h3><p>url使用api/pages?limit=1&amp;offset=2</p><h4 id="继承LimitOffsetPagination进行自定义"><a href="#继承LimitOffsetPagination进行自定义" class="headerlink" title="继承LimitOffsetPagination进行自定义"></a>继承LimitOffsetPagination进行自定义</h4><p>这会对url的的页码参数进行加密</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^api/views$'</span>, ViewsView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,<span class="string">'post'</span>:<span class="string">'create'</span>&#125;)),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^api/views/(?P&lt;pk&gt;\d+)$'</span>, ViewsView.as_view(&#123;<span class="string">'get'</span>: <span class="string">'retrieve'</span>, <span class="string">'delete'</span>: <span class="string">'destroy'</span>, <span class="string">'put'</span>: <span class="string">'update'</span>, <span class="string">'patch'</span>: <span class="string">'partial_update'</span>&#125;), name=<span class="string">'views'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        model = Role</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        fields = <span class="string">'__all__'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在一下视图函数只需三行代码即可</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewsView</span><span class="params">(ModelViewSet)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    queryset = Role.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    serializer_class = PageSerializer</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    pagination_class = PageNumberPagination</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">`</span></pre></td></tr></table></figure><p>这样写了以后，访问api/views 就可以进行增加和查询全部<br>访问api/views/1 就可以单个查询，单个修改，单个删除，单个局部更新和单个全部更新</p><p>跟简单的是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">router = routers.DefaultRouter()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">router.register(<span class="string">r'views'</span>, ViewsView)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^api/'</span>, include(router.urls))</span></pre></td></tr></table></figure><blockquote><p><strong>这样写的话，直接会帮我们生成路由，只需访问 <code>api/views</code> 或 <code>api/views/1</code> 即可</strong></p></blockquote><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>参见路由里的那个视图</p><h2 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a>渲染器</h2><p>可以在视图里写renderer_classes字段，也可以在全局配置 <code>DEFAULT_RENDERER_CLASSES</code><br>需要把rest_framework加入到install_apps配置里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer, BrowsableAPIRenderer, AdminRenderer, HTMLFormRenderer</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenderView</span><span class="params">(APIView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    renderer_classes = [JSONRenderer, BrowsableAPIRenderer]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        roles = Role.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        pg = CustomCursorPagination()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        pg_roles = pg.paginate_queryset(queryset=roles, request=request, view=self)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        se = PageSerializer(instance=roles, many=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> Response(se.data)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django rest_framework&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
      <category term="rest_framework" scheme="https://wangyangang.github.io/categories/django/rest-framework/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
      <category term="rest_framwork" scheme="https://wangyangang.github.io/tags/rest-framwork/"/>
    
  </entry>
  
  <entry>
    <title>docker基本操作</title>
    <link href="https://wangyangang.github.io/2019/12/08/docker/"/>
    <id>https://wangyangang.github.io/2019/12/08/docker/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T15:23:55.873Z</updated>
    
    <content type="html"><![CDATA[<p>去年开始接触docker容器，当然只是处于一个观望的状态。今年有幸开始进行浅尝，特将过程记录下来，供自己以及将要使用docker的小伙伴们参考。</p><a id="more"></a><!-- toc --><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><p><code>docker images</code>: 查看所有的镜像<br><code>docker rmi 镜像id</code>: 删除镜像 -f 强制删除<br><code>docker rmi $(docker images -qa)</code> 删除所有镜像<br><code>docker images -qa</code>:显示所有镜像的id<br><code>docker images --digests</code>:显示出镜像的摘要信息<br><code>docker images --digests --no-trunc</code>:显示镜像的摘要，不截断id<br><code>docker search 镜像名称</code>:搜索镜像<br><code>docker pull 镜像名称</code>:拉取镜像<br><code>docker history 镜像名称</code>: 查看镜像的构建过程</p><p><code>docker port 容器名</code>: 查看容器的端口映射情况<br><code>docker top 容器名</code>: 查看容器的进程<br><code>docker inspect 容器名</code>：查看容器的详细信息，例如ip</p><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><ul><li>docker ps: 所有的容器<ul><li>-a : 正则运行的和历史运行的</li><li>-l：运行的上一个容器</li><li>-n 3:上3次运行的容器</li><li>-q：静默模式，只显示容器编号</li><li>–no-trunc：不截断输出</li></ul></li><li><code>docker run ubuntu</code>: 新建并启动ubuntu容器<ul><li>-i : 以交互模式运行容器，通常与-t同时使用</li><li>-t : 为容器重新分配一个伪输入终端，通常与-i同时使用: <code>docker run -it ubuntu</code></li><li>–name：为容器起一个别名</li><li><code>-p 主机的端口:容器的端口</code>。执行端口映射</li><li>-v 主机的目录:容器的目录。添加容器卷。可以有多个<code>-v</code>指令，添加多个容器卷。</li><li>–privileged=true:如果写权限不够，设为true即可<br>。</li><li>–link=docker_name:alias_name 给正在运行的容器起一个别名，这样在run容器的内部，就可以通过这个别名(alias_name)，来访问另一个容器，并且，另一个容器重启也不会影响访问。（实质是改变了当前容器的/etc/hosts文件，设置一个指向另一个容器的ip地址，并且改变当前容器的env环境变量）</li></ul></li><li>启动容器：<code>docker start 容器id或容器名</code></li><li>重启容器：<code>docker restart 容器id或容器名</code></li><li>停止容器：<code>docker stop 容器id或容器名</code></li><li>强制停止容器：<code>docker kill 容器id或容器名</code></li><li>退出容器：<ul><li>exit：关闭退出</li><li>ctrl+p+q:容器不停止退出</li></ul></li><li>删除容器：<code>docker rm 容器id或容器名</code>  -f表示强制删除</li><li>一次性删除多个容器：<code>docker rm -f $(docker ps -a -q)</code> 或 <code>docker ps -a -q|xargs docker rm</code></li><li>以守护进程启动：<code>docker run -d ubuntu</code></li><li>查看容器日志：<code>docker logs -f -t --tail 容器id</code> -t:加入时间戳 -f:跟随最新的日志打印 –tail 数字：显示最后多少条 启动一个ubuntu并循环打印，然后可以使用日志查看：<code>docker run -d ubuntu /bin/sh -c &quot;while true; do echo hello world; sleep 2; done&quot;</code></li><li>查看容器内运行的进程：<code>docker top 容器id</code></li><li>查看容器内部的细节：<code>docker inspect 容器id</code></li><li>进入正在运行的容器并以命令行交互(在容器外部执行命令)：<code>docker exec -it 容器id bashshell</code> : 是在容器中打开新的终端，并且可以启动新的进程.后面的bashshell，是进入容器后执行的命令，比如 <code>docker exec -it 容器id ls -l /tmp</code></li><li>重新进入: <code>docker attach 容器id</code> ： 直接进入容器启动命令的终端，不会启动新的进程</li><li>拷贝容器内的文件到宿主机：<code>docker -cp 容器id:容器内路径 目的主机路径</code></li><li><code>docker commit</code> : 提交容器副本使其成为一个新的镜像 <code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建的目标镜像名:[标签名]</code><ul><li>docker hub 上下载镜像到本地并运行： <code>docker run -it -p 8080:8080 tomcat</code>  -p 主机端口：docker容器端口: 启动tomcat</li><li>-P 随机分配端口</li></ul></li></ul><h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><ul><li>是什么：<ul><li>联合文件系统（UnionFS）</li><li>Docker镜像加载原理</li><li>分层的镜像</li><li>为什么docker镜像要采用这种分层的结构呢：共享资源</li></ul></li><li>特点：<ul><li>docker镜像都是只读的</li></ul></li></ul><h2 id="docker-容器数据卷"><a href="#docker-容器数据卷" class="headerlink" title="docker 容器数据卷"></a>docker 容器数据卷</h2><p>docker数据持久化<br>特点：</p><ol><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止<br>能干嘛：</li><li>容器的持久化</li><li>容器间继承+共享数据</li></ol><h2 id="数据卷："><a href="#数据卷：" class="headerlink" title="数据卷："></a>数据卷：</h2><ul><li>容器内添加：<ul><li>直接命令添加: <code>docker run -it iv 主机目录：容器目录</code> 例如：<br><code>docker run -it -v /hostData:/containerData centos</code><br><code>docker run -it -v /hostData:/containerData centos:ro</code> 容器内不能修改，read-only</li><li>DockerFile添加<ul><li>根目录下新建mydocker文件夹并进入</li><li>可在DockerFile中使用VOLUME指令来给镜像添加一个或多个数据卷：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> volume <span class="built_in">test</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">FROM centos</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">VOLUME ["/dataVolumeContainer1","/dataVolumeContaier2"]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">CMD echo "finished.......success"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">CMD /bin/bash</span></pre></td></tr></table></figure></li><li>build后生成镜像，获得一个新镜像：<code>docker build -f mydockerFile -t wyg/centosnew .</code> mydockerFile是dockerfile文件，wyg/centosnew是新生成的镜像名，最后的“.”，是生成到docker根目录</li><li>run容器</li><li>主机的文件路径可以用 <code>inspect</code> 命令查看，默认在 <code>/var/lib/container/volumes/</code> 下<blockquote><p><strong>但是我的实验并没有在主机的对应位置找到该路径</strong></p></blockquote></li></ul></li></ul></li></ul><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>容器间传递共享<br><code>--volumes-from 容器名</code><br><code>docker run -it --name doc02 --volumes-from doc01 wyg/centos</code><br>这样doc02容器和doc01容器各自添加的都能共享了</p><h2 id="dockerfile保留字指令"><a href="#dockerfile保留字指令" class="headerlink" title="dockerfile保留字指令"></a>dockerfile保留字指令</h2><ul><li><code>FROM</code> 基础镜像，当前新镜像是基于哪个镜像的</li><li><code>MAINTAINER</code> 镜像维护者的姓名和邮箱地址</li><li><code>RUN</code> 容器构建时需要运行的命令</li><li><code>EXPOSE</code> 当前镜像对外暴露的端口</li><li><code>WORKDIR</code> 指定在创建目录后，终端默认登录的进来工作目录，一个落脚点。默认在根目录</li><li><code>ENV</code> 用来在构建镜像过程中设置环境变量: <code>ENV MY_PATH /usr/mytest</code> 。 这个指令可以在后续的任何指令中使用，比如： <code>WORKDIR $MY_PATH</code></li><li><code>ADD</code> 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</li><li><code>COPY</code> 类似ADD，拷贝目录和文件到镜像中，将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目录路径&gt;位置 <code>COPY src dest COPY</code>  |  <code>[&quot;src&quot;, &quot;dest&quot;]</code></li><li><code>VOLUME</code> 容器数据卷，用于数据保存和持久化工作</li><li><code>CMD</code> 指定一个容器<strong>启动时</strong>要运行的命令。DOCKFILE中可以有多个CMD指令，但只有最后一个生效。<strong>CMD会被dock run 之后的参数替换</strong></li><li><code>ENTRYPOINT</code> 指定一个容器<strong>启动时</strong>要运行的命令。<code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>docker run</code> 之后的参数会被当做参数传递给 <code>ENTRYPOINT</code> ，之后形成新的命令组合</li><li><code>ONBUILD</code> 当构建一个被继承的dockerfile时运行命令，父镜像在被子镜像继承后父镜像的onbuild被触发</li></ul><p><strong>案例1</strong>：<br>mydockerfile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">FROM centos</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">MAINTAINER wangyangang&lt;wangyangang@wangyangang.com&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">ENV MYPATH /tmp</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">WORKDIR $MYPATH</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">RUN yum -y install vim</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">RUN yum -y install net-tools</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">EXPOSE 80</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">CMD echo $MYPATH</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">CMD echo "success........OK"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">CMD /bin/bash</span></pre></td></tr></table></figure><p>构建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker build -f mydockerfile -t mycentos:1.3 .</span></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker run -it mycentos:1.3</span></pre></td></tr></table></figure><p>列出镜像的变更历史：<code>docker history 镜像名</code></p><p><strong><code>ENTRYPOINT</code>案例2</strong>：<br>dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">FROM centos</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">RUN yum install -y curl</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">ENTRYPOINT ["curl", "-s", "https://ip.cn"]</span></pre></td></tr></table></figure><p>构建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile -t myip .</span></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker run myip -i</span></pre></td></tr></table></figure><blockquote><p>此时可以在<code>run</code>的最后加参数，因为<code>dockerfile</code>里用的是<code>ENTRYPOINT</code>指令，<code>-i</code>参数会与<code>ENTRYPOINT</code>里的参数合并成新的参数<br>（原来的是：<code>curl -s https://ip.cn</code>,合并后是：<code>curl -s -i https://ip.cn</code> ）</p></blockquote><p><strong>ONBUILD案例</strong></p><p>父镜像的dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">FROM centos</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">RUN yum install -y curl</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">ENTRYPOINT ["curl", "-s", "https://ip.cn"]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">ONBUILD RUN echo "father docker image is build............"</span></pre></td></tr></table></figure><p>子镜像的dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">FROM myip_father</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">RUN yum install -y curl</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">CMD ["curl", "-s", "https://ip.cn"]</span></pre></td></tr></table></figure><blockquote><p>父镜像名：myip_father，子镜像继承myip_father，那么在子镜像build的时候，会触发父镜像dockerfile里的ONBUILD指令</p></blockquote><h2 id="mysql镜像"><a href="#mysql镜像" class="headerlink" title="mysql镜像"></a>mysql镜像</h2><p>使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mysql -v /Users/mac/Documents/projects/docker/mysql/conf:/etc/mysql/conf.d -v /Users/mac/Documents/projects/docker/mysql/logs:/logs -v /Users/mac/Documents/projects/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=456wyg -d mysql:8.0.16</span></pre></td></tr></table></figure><p>备份:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker exec f32604977707 sh -c 'exec mysqldump --all-databases -uroot -p"456wyg"' &gt; /Users/mac/Documents/projects/docker/mysql/all-databases.sql</span></pre></td></tr></table></figure><p>还原：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">方法1：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">```shell</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先将文件导入到容器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">docker cp **.sql 【容器名】:/root/</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入容器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">docker exec -ti 【容器名/ID】sh</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将文件导入数据库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">mysql -uroot -p 【数据库名】 &lt; ***.sql</span></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker exec -i  mysql_server【docker容器名称/ID】 mysqltest_db_copy【数据库名称】 &lt; /opt/sql_bak/test_db.sql【本地数据表路径】</span></pre></td></tr></table></figure><p>shell</p><h2 id="docker-使用redis"><a href="#docker-使用redis" class="headerlink" title="docker 使用redis"></a>docker 使用redis</h2><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 -v /Users/mac/Documents/projects/docker/redis/data:/data -v /Users/mac/Documents/projects/docker/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis:3.2 redis-server /usr/local/etc/redis/redis.conf --appendonly yes</span></pre></td></tr></table></figure><p>把宿主机对应位置的redis.conf/下建redis.conf,并拷贝进去配置文件，把bind的节点注释掉<br>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">docker exec -it e66f2c804cc1 redis-cli</span></pre></td></tr></table></figure><h2 id="将本地镜像推送到阿里云镜像服务"><a href="#将本地镜像推送到阿里云镜像服务" class="headerlink" title="将本地镜像推送到阿里云镜像服务"></a>将本地镜像推送到阿里云镜像服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  docker login --username=yangangwang1991 registry.cn-hangzhou.aliyuncs.com</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/wyg_docker_hub/mycentos:[镜像版本号]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  docker push registry.cn-hangzhou.aliyuncs.com/wyg_docker_hub/mycentos:[镜像版本号]</span></span></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>nginx更改网站文件的位置<br>where is nginx<br>在/etc/nginx/sites-enabled下有default文件，修改server 80 的root配置即可。</p><h3 id="docker容器的互联-ubuntu系统"><a href="#docker容器的互联-ubuntu系统" class="headerlink" title="docker容器的互联  [ubuntu系统]"></a>docker容器的互联  [ubuntu系统]</h3><p>修改/etc/default/docker文件，添加配置: <code>DOCKER_OPTS=&#39;--icc=true&#39;</code><br>    - 默认为true，允许docker容器间的互相连接。<br>    - 拒绝所有互联，改为false<br>    - 运行特定容器间的连接，–icc=false –iptables=true 运行容器时，使用 <code>--link</code></p><h3 id="docker容器与外部网络的连接"><a href="#docker容器与外部网络的连接" class="headerlink" title="docker容器与外部网络的连接"></a>docker容器与外部网络的连接</h3><p>根据iptables的设置来允许或者阻止响应的ip是否可以访问docker<br>–ip-forward=true</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年开始接触docker容器，当然只是处于一个观望的状态。今年有幸开始进行浅尝，特将过程记录下来，供自己以及将要使用docker的小伙伴们参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://wangyangang.github.io/categories/docker/"/>
    
      <category term="容器" scheme="https://wangyangang.github.io/categories/docker/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="https://wangyangang.github.io/tags/docker/"/>
    
      <category term="容器" scheme="https://wangyangang.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>redis的数据类型和基本命令</title>
    <link href="https://wangyangang.github.io/2019/12/08/redis-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/redis-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T16:22:13.178Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><!-- toc --><ul><li>redis命令是原子操作，不会出现竟态。只能是字符串。不支持数据类型嵌套。</li><li>redis数据类型：string，list，set，zset（有序集合），hash（散列）。用 type key 可以获取键值的数据类型。</li><li>Redis的列表类型可以用来实现队列，并且支持阻塞式读取，可以很容易的实现一个高性能的优先级队列。同时在更高层面上，redis还支持发布/订阅的消息模式，可以基于此构建聊天室等系统。</li><li>redis批量删除<br><img src="redis-batch-delete.jpg" alt="redis批量删除"></li><li>判断键是否存在：exists key</li></ul><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>字符串类型：Redis中最基本的数据类型，它能存储任何格式的字符串，包括二进制数据。可以存邮箱、json化的对象甚至是一张图片。一个字符串最大容量512MB。<ol><li>基本用法：SET key value，GET key</li><li>递增数字：当存储的字符串是整数时，用INCR，让当前键值递增，返回递增后的值:INCR num ,返回1；INCR num，返回2.不是整数会报错。</li><li>增加指定的整数：INCRBY key increment，与INCR不同的是，可以通过increment指定增加的数值。INCRBY bar 2，返回2；INCRBY bar 3，返回5.</li><li>减少指定的整数：DECR key；DECRBY key decrement。</li><li>增加指定浮点数：INCRBYFLOAT key increment. INCRBYFLOAT bar 2.7;INCRBYFLOAT bar 5E+4. increment可为负数.</li><li>向尾部追加值：APPEND key value.不存在则设为value。返回值是追加后字符串总长度。SET key hello;APPEND key ‘ world!’.</li><li>获取字符串长度：STRLEN key.键不存在返回0.</li><li>同时设置/获取多个键值：MSET key value [key value…];MGET key [key…]</li><li>位操作</li></ol></li><li>散列类型（hash）<ol><li>基本用法：HSET key field value;HGET key field;HMSET key field value [field value…];HMGET key field [field…];HGETALL key</li><li>判断字段是否存在:HEXISTS key field</li><li>当字段不存在时赋值：HSETNX key field value.与HSET的区别是如果字段已存在，HSETNX命令将不执行任何操作。</li><li>增加数字：HINCRBY key field increment:hash类型没有HINCR命令，可以通过HINCRBY key field 1来实现。</li><li>删除字段：HDEL key field [field…]</li><li>只获取字段名或字段值：HKEYS key;HKEYS key</li><li>获取字段数量：HLEN key</li></ol></li><li>列表类型(list):有序、不唯一。内部是使用双向链表实现的，所以向列表两端添加元素的时间复杂度为O(1)，获取越接近两端的元素速度就越快。借助列表类型，Redis还可以作为队列使用。最多容纳2^32-1个元素<ol><li>向列表两端增加元素：LPUSH key value;RPUSH key value</li><li>从列表两端弹出元素：LPOP key;RPPO key</li><li>获取列表中元素的个数：LLEN key：时间复杂度O(1)，是直接读取现成的值，不需要遍历再统计数量</li><li>获取列表片段：LRANGE key start stop:支持负索引。取的值包括起始元素和结束元素。起始索引为0。如LRANGE numbers 0 2;LRANGE numbers -2 -1。LRANGE numbers 0 -1,可以返回所有。<ol><li>如果start的索引位置比stop位置靠后，则会返回空列表</li><li>如果stop大于实际的索引范围，则会返回列表最后遍的元素</li></ol></li><li>删除列表中指定的值：LREM key count value:删除列表中前count个值为value的元素，返回值是实际删除的元素个数<ol><li>当count&gt;0时，LREM从列表的左边开始删除前count个值为value的元素</li><li>当count&lt;0时，LREM从列表的右边开始删除前|cout|个值为value的元素</li><li>当count=0时，LREM删除所有值为value的元素</li></ol></li><li>获取/设置指定索引的元素值：index为负，表示从右边计算的索引。<ol><li>获取：LINDEX key index</li><li>设置：LSET key index value</li></ol></li><li>只保留列表指定片段：LTRIM key start end。eg：LTRIM numbers 1 2</li><li>向列表中插入元素：LINSERT key BEFORE/AFTER pivot value.LINSERT命令首先会从列表中从左向右查找值为pivot的元素，然后根据第二个参数是BEFORE还是AFTER来决定将value插入到该元素的前面还是后面。<ol><li>将元素从一个列表转到另一个列表：RPOPLPUSH source destination.RPOPLPUSH是一个很有意思的命令，从名字就可以看出他的功能：先执行RPOP命令再执行LPUSH命令。RPOPLPUSH命令会先从source列表的右边弹出一个元素，然后将其加入到destination列表列表类型键的左边，并返回这个元素的值，整个过程是原子的。</li><li>当把列表类型作为队列使用时，RPOPLPUSH命令可以很直观的在多个队列中传递数据。当source和destination相同时，RPOPLPUSH命令会不断地将队尾的元素移到队首，借助这个特性我们可以实现一个网站监控系统：使用一个队列存储需要监控的网址，然后监控程序不断地使用RPOPLPUSH命令循环取出一个网址来测试可用性。这里使用RPOPLPUSH命令的好处在于在程序执行过程中仍然可以不断地向网址列表中加入新网址，并且整个系统容易扩展，允许多个客户端同时处理队列。</li></ol></li></ol></li><li>集合类型(set)：无序、唯一。内部是使用值为空的散列表（hash table）实现的。<ol><li>增加、删除元素：SADD key member [number…];SREM key member [member…]</li><li>获取集合中所有元素：SMEMBERS key</li><li>判断元素是否在集合中：SISMEMBER key member</li><li>集合间运算：<ol><li>SDIFF key [key …]:差集。SDIFF s1 s2，表示s1-s2，即属于s1不属于s2的元素。可传入多个key：SDIFF s1 s2 s3,先计算s1-s2，用s1-s2的结果去减s3</li><li>SINTER key [key…]：交集。也支持传多个key</li><li>SUNION key [key…]:并集。也支持传多个key</li></ol></li><li>获取集合中元素的个数：SCARD key</li><li>进行集合运算并将结果存储：<ol><li>SDIFFSTORE destination key [key…]把SDIFF的运算结果存在key中</li><li>SINTERSTORE destination key [key…]</li><li>SUNIONSTORE destination key [key…]</li></ol></li><li>随机获得集合中的元素：SRANDMEMBER key [count]:<ol><li>没有count表示从集合中随机获取一个元素</li><li>count为正，从集合中随机选取count个不重复的元素。如果count大于集合的个数，则返回集合中的全部元素</li><li>count为负，从集合中随机选取|count|个元素，这些元素可能重复。</li></ol></li><li>从集合中弹出一个元素：SPOP key</li></ol></li><li>有序集合（sorted set）：为集合中的每个元素都关联了一个分数，可以获得分数最高或最低的前N个元素、获得指定分数范围内的元素等。它与列表有很大不同：<ul><li>列表是通过链表实现的，获取靠近两端的数据速度极快，当元素增多后获取中间位置的元素的速度会变慢，所以它更适合实现如’新鲜事’或’日志’这样很少访问中间元素的应用。</li><li>有序集合类型是使用散列表和跳跃表（skip list）实现的，即使读取位于中间位置的元素的速度也极快（时间复杂度是O(log(N))）</li><li>列表中不能简单地调整某个元素的位置，但是有序集合可以（通过更改这个元素的分数）</li><li>有序集合要比列表更耗费内存</li><li>1.增加元素：ZADD key score member [score member…].分数不仅可以是整数，还支持双精度浮点数：ZADD testboard 17E+307 a; ZADD testboard 1.5 b; ZADD testboard +inf c; ZADD testboard -inf d;其中+inf和-inf分别表示正无穷和负无穷。</li><li>2.获取元素的分数：ZSCORE key member</li><li>3.获得排名在某个范围内的元素列表：<ul><li>ZRANGE key start stop [WITHSCORES];ZREVRANGE key start stop [WITHSCORES].<ul><li>ZRANGE scoreboard 0 2.</li><li>ZRANGE scoreboard 0 2 WITHSCORES:返回0-2的元素和元素的分数。</li></ul></li><li>ZREVRANGE key start stop [WITHSCORES]:按照元素分数从大到小给出结果。</li></ul></li><li>4.获得指定分数范围的元素：<ul><li>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]<ul><li>Eg:ZRANGEBYSCORE scoreboard 80 100,按照元素分数从小到大的顺序返回分数在80-100之间的元素（包含80和100）</li><li>如果希望分数不包含端点可以在分数前加上’(’符号：ZRANGEBYSCORE scoreboard 80 (100</li><li>max和min还支持无穷大和无穷小，用+inf和-info表示</li><li>Eg:ZRANGEBYSCORE scoreboard 60 +inf LIMIT 1 3:获取分数大于60的从第二个人开始的三个人</li></ul></li><li>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset cout]:从大到小，max在前min在后</li></ul></li><li>5.增加某个元素的分数：ZINCRBY key increment member Eg:给Jerry加4分：ZINCRBY scoreboard 4 Jerry</li><li>6.获得集合中元素的数量：ZCARD key</li><li>7.获得指定分数范围内的元素个数：ZCOUNT key min max</li><li>8.删除一个或多个元素：ZREM key member [member…]</li><li>9.按照排名范围删除元素：ZREMRANGEBYRANK key start stop</li><li>10.按照分数范围删除元素：ZREMRANGEBYSCORE key min max</li><li>11.获得元素的排名：ZRANK key member;ZREVRANK key member</li><li>12.计算有序集合的交集、并集、补集：ZINTERSCORE destination numkeys key [key…] [WEIGHTS weight [weight…]] [AGGREGATE SUM|MIN|MAX]</li></ul></li></ol><h2 id="SORT命令"><a href="#SORT命令" class="headerlink" title="SORT命令"></a>SORT命令</h2><p>SORT是Redis中最强大最复杂的命令之一，如果使用不好很容易成为性能瓶颈。SORT命令的时间复杂度为O(n+mlogm)，其中n表示要排序的列表（集合或有序集合）中的元素个数，m表示要返回的元素个数。当n较大的时候SORT命令的性能相对较低，并且Redis在排序前会建立一个长度为n的容器来存储待排序的元素，虽然是一个临时的过程，但如果同时进行较多的大数据量排序操作则会严重影响性能。所以在开发中使用SORT命令需要注意一下几点：<br>        1. 尽可能减少待排序键中元素的数量（使n尽可能小）<br>        2. 使用LIMIT参数只获取需要的数据（使m尽可能小）<br>        3. 如果要排序的数据数量较大，尽可能使用STORE参数将结果缓存<br>    1. 对列表类型、集合类型和有序集合类型键进行排序（键必须能转为double类型，string类型不行）,对有序集合排序忽略分数，只对值排序。<br>    2. 加上ALPHA参数，就可以对非数字元素进行排序。如s1为c a b，EG:sort s1=&gt; a,b,c<br>    3. 加上DESC参数可从大到小排序<br>    4. 支持分页：LIMIT offset count<br>    5. BY参数：按什么进行排序。BY 参考键，参考键可以使字符串类型键或者散列类型键的某个字段<br>        1. 根据散列类型的某个字段：SORT tag:ruby:posts BY post:<em>-&gt;time DESC ：读取post:2,post:3,post:6等散列键中的time字段并以此决定tag:ruby:posts的排列顺序<br>        2. 根据字符串类型：SORT sortbylist BY itemscore:</em> DESC ：根据键为itemscore:<em>匹配的几个键的值来排序sortbylist<br>    6. GET参数：使SORT命令的返回结果不再是元素自身的值，而是GET参数中指定的键值。GET参数也支持字符串类型和散列类型的键，使用*作为占位符。如：SORT tag:ruby:posts BY post:</em>-&gt;time DESC GET post:*-&gt;title. 可以写多个GET参数。 GET # 会返回元素本身的值。<br>    7. STORE参数：STORE key，把排序结果保存到key中。key为列表类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;redis命令是原子操作，不会出现竟态。只能是字符串。不支持数据类型嵌套。&lt;/li&gt;
&lt;li&gt;redis数据类型：string，list，set，zset（有序集合），hash（散列）。用 type
      
    
    </summary>
    
    
      <category term="redis" scheme="https://wangyangang.github.io/categories/redis/"/>
    
      <category term="数据库" scheme="https://wangyangang.github.io/categories/redis/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="https://wangyangang.github.io/tags/redis/"/>
    
      <category term="数据库" scheme="https://wangyangang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes</title>
    <link href="https://wangyangang.github.io/2019/12/08/kubernetes/"/>
    <id>https://wangyangang.github.io/2019/12/08/kubernetes/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T15:42:43.141Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="本机环境预设"><a href="#本机环境预设" class="headerlink" title="本机环境预设"></a>本机环境预设</h2><h3 id="测试环境说明"><a href="#测试环境说明" class="headerlink" title="测试环境说明"></a>测试环境说明</h3><p>测试使用的kubernets集群可由一个master主机和一个以上(建议至少两个)node主机组成，这些主机可以是物理服务器，也可以运行于vaware，virtualbox或kvm等虚拟化平台上的虚拟机，甚至是公有云上的vps主机。<br>本测试环境将由master，node01和node02，node03三个虚拟机组成。各主机需要预设的系统环境如下：</p><ol><li>借助于NTP服务设定各节点时间精确同步</li><li>通过DNS完成各节点的主机名称解析，测试环境主机数量较少时也可以使用hosts文件进行</li><li>关闭各节点的iptables和firewalld服务，并确保他们被禁止随系统引导过程启动</li><li>各节点禁用SELinux</li><li>各节点禁用所有的Swap设备</li><li>若要使用ipvs模型的proxy，各节点还需要载入ipvs相关的各模块；</li></ol><h3 id="设定时钟同步"><a href="#设定时钟同步" class="headerlink" title="设定时钟同步"></a>设定时钟同步</h3><p>各节点可直接访问互联网，直接启动chronyd系统服务，并设定其随系统引导而启动：<br>用 <code>systemctl status chronyd 查看chronyd服务的状态，如果没有chronyd</code>服务，需要安装<br>用 <code>date</code> 查看当前时间，（其它node上和master上也这么做）看各个节点上的时间是否同步<br>用 <code>systemctl start chronyd</code>同步时间和互联网一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">systemctl enable chronyd</span></pre></td></tr></table></figure><p>不过，建议用户配置使用本地的时间服务器，在节点数量众多时尤其如此。存在可用的本地时间服务器时，修改节点的/etc/chrony.conf配置文件，并将时间服务器指向响应的主机即可。配置格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">server CHRONY-SERVER-NAME-OR-IP iburst</span></pre></td></tr></table></figure><h3 id="主机名称解析"><a href="#主机名称解析" class="headerlink" title="主机名称解析"></a>主机名称解析</h3><p>出于简化配置步骤的目的，本测试环境使用hosts文件进行各节点的名称解析，文件内容如下：(/etc/hosts,最后四行是新加的)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">192.168.116.160 master.magedu.com master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">192.168.116.161 node01.magedu.com node01</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">192.168.116.162 node02.magedu.com node02</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">192.168.116.163 node03.magedu.com node03</span></pre></td></tr></table></figure><h3 id="关闭iptables或firewalld服务"><a href="#关闭iptables或firewalld服务" class="headerlink" title="关闭iptables或firewalld服务"></a>关闭iptables或firewalld服务</h3><p>在centos上，iptabes或firewalld服务通常只会安装并启动一种，在不确定具体启动状态的前提下，这里通过同时关闭并禁用两者即可简单达到设定目标。<br>使用 <code>systemctl status firewalld</code> 和 <code>systemctl status iptables</code>查看firewalld和iptables是否关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">systemctl stop iptables.service</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">systemctl disable iptables.service</span></pre></td></tr></table></figure><h3 id="关闭并禁用SELinux"><a href="#关闭并禁用SELinux" class="headerlink" title="关闭并禁用SELinux"></a>关闭并禁用SELinux</h3><p>使用 <code>getenforce</code> 查看状态</p><p>若当前启用了SELinux，则需要编辑/etc/sysconfig/selinux文件，并禁用SELinux（设置SELinux=disabled）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sed -i 's@^\).*@\1disabled@' /etc/sysconfig/selinux</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">setenforce 0</span></pre></td></tr></table></figure><h3 id="禁用Swap设备"><a href="#禁用Swap设备" class="headerlink" title="禁用Swap设备"></a>禁用Swap设备</h3><p>部署集群时，kubeadm默认会预先检查当前主机是否禁用了Swap设备，并在未禁用时强制终止部署过程。因此，在主机内存资源充裕的条件下，需要禁用所有的Swap设备，否则，就需要在后文的kubeadm init及kubeadm join命令执行时，额外使用相关的选项忽略检查错误。<br>关闭Swap设备，需要分两步完成。首先是关闭当前已启用的所有Swap设备：<br>使用 <code>free -m</code> 查看<br><code>swapoff -a</code><br>而后编辑/etc/fstab配置文件，注释用于挂载Swap设备的所有行。</p><h3 id="启用ipvs内核模块"><a href="#启用ipvs内核模块" class="headerlink" title="启用ipvs内核模块"></a>启用ipvs内核模块</h3><h2 id="安装相关的程序包"><a href="#安装相关的程序包" class="headerlink" title="安装相关的程序包"></a>安装相关的程序包</h2><p>kubernets会对经过充分验证的docker程序版本进行认证，目前认证完成的最高版本是17.03，但docker-ce的最新版本已经高出了几个版本号。管理员可忽略此认证而直接使用最新版本的docker-ce程序，不过，建议根据后面的说明，将安装命令替换为安装17.03版。</p><blockquote><p>去阿里云上找docker-ce对应的镜像，</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">yum install kubelet kubeadm kubectl</span></pre></td></tr></table></figure><p>如果要安装目前经过kubenets认证的docker-17版本，可以将上面第一天安装命令替换为如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">yum install -y --setopt=obsoletes=0 docker-ce-17.03.2.ce docker-ce-selinux-17.03.2.ce</span></pre></td></tr></table></figure><h2 id="启动docker服务（在各节点执行）"><a href="#启动docker服务（在各节点执行）" class="headerlink" title="启动docker服务（在各节点执行）"></a>启动docker服务（在各节点执行）</h2><p>若要通过默认的k8s.gcr.io镜像仓库获取kubernetes系统组件的相关镜像，需要配置docker Unit File (/usr/lib/systemd/system/docker.service文件)中的Environment变量，为其定义合用的HTTPS_PROXY，格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Environment="HTTPS_PROXY=http://172.16.0.47:1087"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Environment="NO_PROXY=127.0.0.0/8,192.168.0.0/16"</span></pre></td></tr></table></figure><p>另外，docker自1.13版起会自动设置iptables的FORWARD默认策略为DROP，这可能会影响kubernetes集群依赖的报文转发功能，因此需要在docker服务启动后，重新将FORWARD链的默认策略设置为ACCEPT，方式是修改/usr/lib/systemd/system/docker.service文件，在”EexcSTART=/usr/bin/dockerd“一行之后新增一行如下内容：<br><code>ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT</code></p><p>重载完成后即可启动docker服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span></pre></td></tr></table></figure><p>而后设定docker和kubelet随系统引导自动启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">systemctl enable docker kubelet</span></pre></td></tr></table></figure><p>node节点也这么做，也都启动docker</p><p><code>/usr/lib/systemd/system/docker.service</code>文件部分配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[Service]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Type=notify</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> the default is not to use systemd <span class="keyword">for</span> cgroups because the delegate issues still</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> exists and systemd currently does not support the cgroup feature <span class="built_in">set</span> required</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> containers run by docker</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Environment=<span class="string">"HTTPS_PROXY=http://www.ik8s.io"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Environment=<span class="string">"HTTPS_PROXY=http://registry.aliyuncs.com/google_containers"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">Environment="HTTPS_PROXY=http://172.16.0.47:1087"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Environment="NO_PROXY=127.0.0.0/8,192.168.0.0/16"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">TimeoutSec=0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">RestartSec=2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">Restart=always</span></pre></td></tr></table></figure><h2 id="安装kubernetes相关的包"><a href="#安装kubernetes相关的包" class="headerlink" title="安装kubernetes相关的包"></a>安装kubernetes相关的包</h2><p>需要自己建目录。在/etc/yum.repos.d/下建一个叫kubernetes.repo的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[kubernetes]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">name=Kubernetes repository</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/  # 这是repo包的地址</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">enabled=1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">gpgcheck=1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">repo_gpgcheck=1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        # 上面的gpgkey，来自包的doc目录下的rpm-package-key.gpg和yum-key.gpg的链接地址，两行之间有空格或者换行之后加一个制表符</span></pre></td></tr></table></figure><p>然后用 <code>yum repolist</code> 可以查看这个包的信息<br>最后用 <code>yum install kubeadm kubelet kubectl</code><br>在使用kubeadm之前需要配置一下<br>编辑/etc/sysconfig/kubelet文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">KUBELET_EXTRA_ARGS&#x3D;&quot;--fail-swap-on&#x3D;false&quot;</span></pre></td></tr></table></figure><p>可通过 <code>kubeadm config images list</code>查看需要pull的包<br>可以先通过<code>kubeadm config images pull</code>拉下来包</p><p>启动kubernetes：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --kubernetes-version="v1.16.3" --pod-network-cidr="10.244.0.0/16" --dry-run --ignore-preflight-errors=Swap</span></pre></td></tr></table></figure><p>看到 your kubernetes master has initialized successfully！表示已成功<br>然后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span></pre></td></tr></table></figure><p>通过： <code>kubectl get nodes</code> 可以看到master节点已经成功了！<br>但是是NotReady状态，需要安装网络插件 flannel，去github的flanne里找到这个命令<br>部署flannel：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></pre></td></tr></table></figure><p>这时，通过<code>kubectl get nodes</code> 可以看到master节点已经Ready了！</p><h2 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h2><ol><li>初始化master节点<br>若未禁用swap设备，则需要编辑kubelet的配置文件：/etc/sysconfig/kubelet,设置其忽略swap启用的状态错误，内容如下：<br>KUBELET_EXTRA_ARGS=”–fail-swap-on=false”<br>(可选步骤)而后，在运行初始化命令之前先运行如下命令单独获取相关的镜像文件，而后再运行后面的kubeadm init命令，以便于观察到镜像文件的下载过程。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">kubeadm config images pull</span></pre></td></tr></table></figure>启动：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --kubernetes-version="v1.16.3" --pod-network-cidr="10.244.0.0/16" --dry-run --ignore-preflight-errors=Swap</span></pre></td></tr></table></figure><p>启动报错的话，可以试试重启kubeadm<br><code>kubeadm reset</code></p><h2 id="node节点加入"><a href="#node节点加入" class="headerlink" title="node节点加入"></a>node节点加入</h2><blockquote><p>加入之前，node节点也要安装kubernetes包(kubeadm kubectl kubelet)，方法同上,并且启动了docker。并且便捷/etc/sysconfig/kubelet文件。</p></blockquote><p>在主节点部署的时候，可以看到一条提示信息，如下：就是用来让node节点加入集群的命令。当然也可以通过其他方式获得此命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.116.160:6443 --token 178cui.cgqvfub88r7dnjh2 \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    --discovery-token-ca-cert-hash sha256:a8195bb5b709bebc7a4d71bbd01041b05d227824304b81462c62196f729b4c9f</span></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.116.160:6443 --token 178cui.cgqvfub88r7dnjh2     --discovery-token-ca-cert-hash sha256:a8195bb5b709bebc7a4d71bbd01041b05d227824304b81462c62196f729b4c9f --ignore-preflight-errors=Swap</span></pre></td></tr></table></figure><p>加入的过程中可能报错，也需要关闭Swap: swapoff -a</p><blockquote><p>node节点加入集群的时候，也会pull镜像，也需要科学上网。z执行完命令可以通过docker image list 查看镜像是否已经拖下来了，没有的话，通过 <code>kubeadm config images pull</code> 手动的拖,进行脱下来以后，通过在master节点上运行<code>kubectl get nodes</code> 查看一下node节点是否已经加入了集群。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;k8s&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://wangyangang.github.io/categories/kubernetes/"/>
    
      <category term="docker" scheme="https://wangyangang.github.io/categories/kubernetes/docker/"/>
    
      <category term="容器" scheme="https://wangyangang.github.io/categories/kubernetes/docker/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="docker" scheme="https://wangyangang.github.io/tags/docker/"/>
    
      <category term="容器" scheme="https://wangyangang.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="kubernetes" scheme="https://wangyangang.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>心事浩渺连广宇</title>
    <link href="https://wangyangang.github.io/2019/12/08/preface-of-three-body/"/>
    <id>https://wangyangang.github.io/2019/12/08/preface-of-three-body/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T14:16:03.070Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><blockquote><p>三体Ⅲ·死神永生  序</p></blockquote><p><img src="dead-end.jpg" alt=""></p><p>多年以后，我还会记得看完《三体》的那个秋夜，我走出家门，在小区里盘桓。铅灰色的上丅海夜空几乎看不到几颗星星，但是我的心中却仿佛有无限的星光在涌动。这是一种奇异的感受，我的视觉、听觉和思维好像都被放大、重组和牵引，指向一个浩瀚的所在。</p><p>即使没有光污染，身在北半球中纬度的我也不可能看到半人马座。但是在《三体》之后，我却觉得自己与那看不见的星系中子虚乌有的三星有了一种近乎真实的联系。</p><p>从一开始，刘慈欣就被人视为中国的硬科幻代表。要知道，这是一桩吃力不讨好的活儿，在当今这个微小化、朋克化和奇幻化的世界科幻文坛，相当不与时俱进。但大刘仿佛是下定决心要为中国科幻补课一般，执著地用坚实的物理法则和潮水一般的细节为我们打造全新的世界。这些世界卓然成形，栩栩如生地向我们猛扑过来。</p><p>《三体》是一部多重旋律的作品：此岸、彼岸与红岸，过去、现在与未来，交织成中国文学中罕见的复调。故事的核心竟然是我们既熟悉又陌生的文革。当主流文学渐渐远离了这个沉重的话题，大刘竟然以太空史诗的方式重返历史的现场，用光年的尺度来重新衡量那永远的伤痕，在超越性的视野上审视苦难、救赎与背叛。这一既幻想又现实还科学的中国版《天路历程》，疯狂而冷静，沉重而壮阔，绝望而超脱。</p><p>文革仅仅是《三体》的起点。我个人认为，书中最精彩的部分是以虚拟游戏方式展示的三体世界历史。三体星系由于拥有三颗太阳，其不规则运动使得三体文明的生存条件极为严酷。为了应对变幻莫测的自然环境，他们随时可以将自己体内的水分完全排出，变成干燥的纤维状物体，以躲过完全不适合生存的恶劣气候。对于这个极为奇幻的想象世界，大刘充分发挥了他在硬科学上的特长，赋予这个世界完全真实可信的物理特性和演化发展规律。作为一个电脑工程师，大刘甚至设计了一个三体程序，来模拟宇宙文明间的相互关系。</p><p>这是一个游戏，游戏背后是一个遥远星际文明二百次毁灭与重生的传奇，游戏中的人物却是孔子、墨子、秦始皇、伽利略、葛力高利教皇、牛顿、爱因斯坦……古今中外各路人马走马灯似的上场。这是一场跨越时空的狂欢，历史、文革、三体又构成了另一个意义上的三体关系，它们之间遥相辉映而又扑朔迷离，在最不可思议的生存景象中蕴涵着触手可及的现实针对性，把三体系统的复杂性发挥得淋漓尽致。</p><p>要是换了别人，《三体》写到这个程度，大可满意收场了，但是对大刘来说，好戏才刚刚开始。在《三体Ⅱ·黑暗森林》中，地球、三体和宇宙更高级文明构成了一个更大规模的三体结构。面对三体人令人难以置信的科技和前来毁灭地球的庞大舰队，人类举全球之力，制订了“面壁计划”，由四位“面壁人”独立设计四套反击方案。说真的，其中每一套对策都构思独特、气势磅礴，令人拍案叫绝。放到其他人的作品中，每个都可以作为构筑大结局的终极解决方案。但对大刘来说，这些都只不过是铺垫和浮云。</p><p>假如在太空中存在着无数的文明，它们之间应该是什么样的关系？大刘别出心裁地设想了一门“宇宙社会学”，专门研究这个问题。宇宙社会学设定两条公理：“第一，生存是文明的第一需要；第二，文明不断增长和扩张，但宇宙中的物质总量保持不变。”乍一看这“公理”很俗很平淡很没意思，但等到最后底牌翻出来绝对震死你。在《三体Ⅱ·黑暗森林》的结尾，我体验到了多年未在文学作品中体验到的完美高潮，一种启示性的震撼，一种极致的满足。而这种满足，正来自“宇宙社会学公理”那出人意料的合理展开和推衍，经过了漫长的准备和铺垫，与作品的开头形成绝妙呼应。我想，这也就是马克思推崇的“逻辑与历史的统一”吧。在我们的中国文学中，又有多少这样的“逻辑与历史的统一”呢？</p><p>当《三体Ⅱ·黑暗森林》问世的时候，我们这些三体迷的心态相当矛盾。一方面，我们觉得《三体Ⅱ·黑暗森林》近于完美，难以想象这之后还能整出些什么来。另一方面，我们又希望大刘能够再整出些什么来。之后，又听说他在工作上遇到了一点问题，曾经考虑放弃《三体Ⅲ》的写作，着实令我们担忧不已。但最终，身处僻壤的他，又写出一本放眼宇宙的大作，这本身就是一件颇有科幻色彩的事。谢天谢地，他终于坚持了下来。</p><p>当大刘提出让我来为《三体Ⅲ》写序的时候，我的内心是一片抑制不住的狂喜，不仅是为了这份难得的荣耀，更是为了能抢在第一时间先睹为快。在一个剧透被视为不可饶恕的罪行的年代，我必须非常小心。长话短说吧，我认为《三体Ⅲ》在许多方面都超越了前两部，而且这种超越不是一点点。前面对宇宙的黑暗森林只是迂回虚写，第三部就是正面强攻了，这难度极大。我真是很佩服大刘毫不取巧的勇气，更佩服他对宇宙风景得心应手的描写，那真可以说是“精骛八极，心游万仞”。看到《三体Ⅲ》的结尾，我忍不住想起阿西莫夫的《最后的问题》，那也是对宇宙终点的描写，大家可以比较一下，看看谁的想象力走得更远，谁的细节更丰富，谁的宇宙更宏大。</p><p>《三体Ⅲ》很硬科幻，对普通读者来说，流畅度和可读性可能会不如前两部。其中一些段落甚至有一些晦涩（如对“神”的描写），但是对科幻爱好者和大刘的粉丝而言，纷至沓来的宇宙细节一定会让他们更加过瘾。而且我们理解，大刘的“硬”并非铁板一块，而是软硬相兼、虚实相间，其内在逻辑可以这样解读：越是疯狂虚幻的想象，越是超越性的思维，背后越是需要坚实的细节和强大的逻辑。刘氏宇宙学的基础是技术，而在这林林总总技术化的冷酷思考背后，有一颗柔软温暖的心。从《三体》开始，大刘越走越远，但他并非一去不回，即使在最远的地方，我们也能看到他对人类的关爱。《三体Ⅲ》始于一个近乎琼瑶式的爱情故事，一个人为自己暗恋的对象买一颗遥远的星星，这故事是如此的寂寞无助、浪漫彻骨。最终，这颗星星将为无尽的黑暗森林带来一丝光亮，卑微绝望的单恋也将成为播撒宇宙的大爱。</p><p>在整个三部曲中，我个人认为第一部最有历史感和现实性；第二部的完成度最高，结构最完整，线索最清晰，也最华丽好看；而《三体Ⅲ》则是把宇宙视野和本质性的思考推向了极致，这方面目前无人能及。在一个思想淡出文学（以及其他领域）的年代，我们看到中国的科幻界有人在默默地补位，而且远不止大刘一个人。《三体》对历史的反思，对道德的超越，到《三体Ⅲ》发展成为对全面的宇宙社会学、宇宙心理学、宇宙生态学的建构。这是屠龙之术吗？看看斯蒂芬·霍金最近的警告，也许我们会对“杞人忧天”这个成语做出全新的理解。</p><p>有时候我会忍不住想，假如有一天三体人真的降临，人类应该请大刘出山，参加地球危机委员会的工作。无论是威慑博弈、防卫反击，还是宇宙公关，大刘都是领先一步的专家。如果说天机不可泄露的话，大刘应该是我们这个世界最知晓天机的人之一了。三体人如果有一份追杀名单的话，他也绝对会名列前茅。小心啊，大刘！</p><p>当然，这只不过是幻想，只不过是神话……可是，说到神话，这难道不正是我们这个时代的奢侈品吗？坦率地说，系统性的史诗与神话一直是中国文学的弱项。在遭受后现代丅文化的洗礼之后，我们的作家更是如获至宝，把缺失视为强项，奉行“躲避崇高”的策略，鄙视宏大叙事，消解终极追问。我推崇大刘的作品，也因为他逆流而上，发扬理性主义和人文精神，为中国文学注入整体性的思维和超越性的视野。这种终极的关怀和追问，又建立在科学的逻辑和逼真的细节之上，这就让浩瀚的幻想插上了坚实的翅膀。</p><p>当尼采向世界发出“上帝已死”的宣告时，一些价值解体了，但另一些依然存在。旧的神话消失了，新的神话依然在不断诞生。人类从来没有停下追赶神话的脚步。我们惊奇地发现，在一个崭新的世纪，无尽的宇宙依然是无尽的神话的无尽的沃壤，而科学与技术已经悄然在这新神话中扮演了越来越重要的角色。大刘的世界，涵盖了从奇点到宇宙边际的所有尺度，跨越了从白垩纪到未来亿万年的漫长时光，其思想的速度和广度，早已超越了“可上九天揽月，可下五洋捉鳖”的传统境界。《三体Ⅲ》对宇宙结构的想象，已经开始涉及时间的本质和创世的秘密，但看得出大刘有意与西方的神话保持距离，走的是一条新的中国神话的道路。这是前所未有的工作。关于宇宙之始，之终，之真相，他猜了、他想了、他写了，至于是否正确，已经不重要了。虽说人类一思考，上帝就发笑，可人类如果不思考，上帝连发笑都不屑。</p><p>严锋<br>复旦大学中文系副教授<br>《新发现》杂志主编</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="杂文" scheme="https://wangyangang.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="三体" scheme="https://wangyangang.github.io/tags/%E4%B8%89%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>django模型models的使用</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-models/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-models/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-09T14:24:05.349Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><h2 id="模型类基础"><a href="#模型类基础" class="headerlink" title="模型类基础"></a>模型类基础</h2><h3 id="创建模型类"><a href="#创建模型类" class="headerlink" title="创建模型类"></a>创建模型类</h3><p>django会为表创建自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后django不会再创建自动增长的主键列。<br>默认创建的主键列属性为id，可以使用pk代替，pk全拼为primary key。</p><blockquote><p>注意：pk是主键的别名，若主键名为id2，那么pk是id2的别名。</p></blockquote><p>属性命名限制：</p><ul><li>不能是python的保留关键字。</li><li>不允许使用连续的下划线，这是由django的查询方式决定的，在第4节会详细讲解查询。</li><li>定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">属性=models.字段类型(选项)</span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your models here.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    name = models.CharField(max_length=<span class="number">20</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                            verbose_name=<span class="string">'书籍名称'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                            null=<span class="literal">False</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                            blank=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    price = models.DecimalField(name=<span class="string">'price'</span>, verbose_name=<span class="string">'价格'</span>, max_digits=<span class="number">6</span>, decimal_places=<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    comment = models.CharField(name=<span class="string">'comment'</span>, verbose_name=<span class="string">'评论'</span>, max_length=<span class="number">200</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        db_table = <span class="string">'book_info'</span>  <span class="comment"># 定义模型在数据库里的表名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        verbose_name = <span class="string">'书籍'</span>   <span class="comment"># 定义模型在后台admin里看到的名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        verbose_name_plural = <span class="string">'许多书籍'</span> <span class="comment"># 定义模型的复数形式的名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    hgender = models.BooleanField()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    hbook = models.ForeignKey(<span class="string">'BookInfo'</span>, on_delete=<span class="literal">None</span>) <span class="comment"># 外键约束</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        db_table = <span class="string">'hero_info'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        verbose_name = <span class="string">'英雄'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        verbose_name_plural = <span class="string">'英雄表'</span></span></pre></td></tr></table></figure><h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><ul><li>AutoField: 自动增长的IntergerField，通常不用指定，不指定时，django会自动创建属性名为id的自动增长的属性</li><li>BooleanField: 布尔字段，值为True或False</li><li>NullBoleanField: 支持Null，True，False三种类型</li><li>CharField(max_length=字段长度): 字符串。</li><li>TextField: 大文本字段，一般超过4000个字符时使用</li><li>IntergerField: 整数</li><li>DecimalField(max_digits=None, decimal_places=None)：十进制浮点数。<br>参数max_digits表示总位数。<br>参数decimal_places表示小数位数。</li><li>FloatField：浮点数。</li><li>DateField[auto_now=False, auto_now_add=False])：日期。<ul><li>参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于”最后一次修改”的时间戳，它总是使用当前日期，默认为false。</li><li>参数auto_now_add表示当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false。</li><li>参数auto_now_add和auto_now是相互排斥的，组合将会发生错误。</li></ul></li><li>TimeField：时间，参数同DateField。</li><li>DateTimeField：日期时间，参数同DateField。</li><li>FileField：上传文件字段。</li><li>ImageField：继承于FileField，对上传的内容进行校验，确保是有效的图片。</li></ul><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><blockquote><p>通过选项实现对字段的约束，选项如下：</p></blockquote><ul><li>null：如果为True，表示允许为空，默认值是False。</li><li>blank：如果为True，则该字段允许为空白，默认值是False。<ul><li>对比：null是数据库范畴的概念，blank是表单验证范畴的。</li></ul></li><li>db_column：字段的名称，如果未指定，则使用属性的名称。</li><li>db_index：若值为True, 则在表中会为此字段创建索引，默认值是False。</li><li>default：默认值。</li><li>primary_key：若为True，则该字段会成为模型的主键字段，默认值是False，一般作为AutoField的选项使用。</li><li>unique：如果为True, 这个字段在表中必须有唯一值，默认值是False。</li></ul><h2 id="模型类查询"><a href="#模型类查询" class="headerlink" title="模型类查询"></a>模型类查询</h2><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><h4 id="查询等"><a href="#查询等" class="headerlink" title="查询等"></a>查询等</h4><p><strong>exact：表示判等。</strong></p><p>例：查询编号为1的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.filter(id__exact=<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">可简写为：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.filter(id=<span class="number">1</span>)</span></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p><strong>contains：是否包含。</strong></p><blockquote><p>说明：如果要包含%无需转义，直接写即可。</p></blockquote><p>例：查询书名包含’传’的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(btitle__contains=<span class="string">'传'</span>)</span></pre></td></tr></table></figure><p><strong>startswith、endswith：以指定值开头或结尾。</strong></p><p>例：查询书名以’部’结尾的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(btitle__endswith=<span class="string">'部'</span>)</span></pre></td></tr></table></figure><blockquote><p>以上运算符都区分大小写，在这些运算符前加上i表示不区分大小写，如iexact、icontains、istartswith、iendswith.</p></blockquote><h4 id="空查询"><a href="#空查询" class="headerlink" title="空查询"></a>空查询</h4><p><strong>isnull：是否为null。</strong></p><p>例：查询书名不为空的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(btitle__isnull=<span class="literal">False</span>)</span></pre></td></tr></table></figure><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><p><strong>in：是否包含在范围内。</strong></p><p>例：查询编号为1或3或5的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(id__in=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span></pre></td></tr></table></figure><h4 id="比较查询"><a href="#比较查询" class="headerlink" title="比较查询"></a>比较查询</h4><p><strong>gt、gte、lt、lte：大于、大于等于、小于、小于等于。</strong></p><p>例：查询编号大于3的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(id__gt=<span class="number">3</span>)</span></pre></td></tr></table></figure><p><strong>不等于的运算符，使用exclude()过滤器。</strong></p><p>例：查询编号不等于3的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.exclude(id=<span class="number">3</span>)</span></pre></td></tr></table></figure><h4 id="日期查询"><a href="#日期查询" class="headerlink" title="日期查询"></a>日期查询</h4><p><strong>year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。</strong></p><p>例：查询1980年发表的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(bpub_date__year=<span class="number">1980</span>)</span></pre></td></tr></table></figure><p>例：查询1980年1月1日后发表的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(bpub_date__gt=date(<span class="number">1990</span>, <span class="number">1</span>, <span class="number">1</span>))</span></pre></td></tr></table></figure><h3 id="F对象"><a href="#F对象" class="headerlink" title="F对象"></a>F对象</h3><p>之前的查询都是对象的属性与常量值比较，两个属性怎么比较呢？ 答：使用F对象，被定义在django.db.models中。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">F(属性名)</span></pre></td></tr></table></figure><p>例：查询阅读量大于等于评论量的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(bread__gte=F(<span class="string">'bcomment'</span>))</span></pre></td></tr></table></figure><p>可以在F对象上使用算数运算。</p><p>例：查询阅读量大于2倍评论量的图书。</p><p><code>list = BookInfo.objects.filter(bread__gt=F(&#39;bcomment&#39;) * 2)</code></p><h3 id="Q对象"><a href="#Q对象" class="headerlink" title="Q对象"></a>Q对象</h3><p>多个过滤器逐个调用表示逻辑与关系，同sql语句中where部分的and关键字。</p><p>例：查询阅读量大于20，并且编号小于3的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.filter(bread__gt=<span class="number">20</span>,id__lt=<span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">或</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.filter(bread__gt=<span class="number">20</span>).filter(id__lt=<span class="number">3</span>)</span></pre></td></tr></table></figure><p>如果需要实现逻辑或or的查询，需要使用Q()对象结合|运算符，Q对象被义在django.db.models中。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Q(属性名__运算符=值)</span></pre></td></tr></table></figure><p>例：查询阅读量大于20的图书，改写为Q对象如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(Q(bread__gt=<span class="number">20</span>))</span></pre></td></tr></table></figure><p>Q对象可以使用&amp;、|连接，&amp;表示逻辑与，|表示逻辑或。</p><p>例：查询阅读量大于20，或编号小于3的图书，只能使用Q对象实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(Q(bread__gt=<span class="number">20</span>) | Q(pk__lt=<span class="number">3</span>))</span></pre></td></tr></table></figure><p>Q对象前可以使用~操作符，表示非not。</p><p>例：查询编号不等于3的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(~Q(pk=<span class="number">3</span>))</span></pre></td></tr></table></figure><blockquote><p>如果要用Q查询和关键字查询一起用，那么Q查询要放在前面</p></blockquote><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>使用aggregate()过滤器调用聚合函数。聚合函数包括：Avg，Count，Max，Min，Sum，被定义在django.db.models中。</p><p>例：查询图书的总阅读量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.aggregate(Sum(<span class="string">'bread'</span>))</span></pre></td></tr></table></figure><p>注意aggregate的返回值是一个字典类型，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'聚合类小写__属性名'</span>:值&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">如:&#123;<span class="string">'sum__bread'</span>:<span class="number">3</span>&#125;</span></pre></td></tr></table></figure><p>使用count时一般不使用aggregate()过滤器。</p><p>例：查询图书总数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.count()</span></pre></td></tr></table></figure><p>注意count函数的返回值是一个数字。</p><h3 id="分组函数-anonotate"><a href="#分组函数-anonotate" class="headerlink" title="分组函数 anonotate"></a>分组函数 anonotate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.values(<span class="string">'authors__name'</span>).anonotate(Sum(<span class="string">'price'</span>))    <span class="comment"># 计算每一个人出版的所有书的总价格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Publish.objects.values(<span class="string">'name'</span>).anonotate(Min())</span></pre></td></tr></table></figure><h2 id="查询集"><a href="#查询集" class="headerlink" title="查询集"></a>查询集</h2><p>查询集表示从数据库中获取的对象集合，在管理器上调用某些过滤器方法会返回查询集，查询集可以含有零个、一个或多个过滤器。过滤器基于所给的参数限制查询的结果，从Sql的角度，查询集和select语句等价，过滤器像where和limit子句。</p><p>返回查询集的过滤器如下：</p><ul><li>all()：返回所有数据。</li><li>filter()：返回满足条件的数据。</li><li>exclude()：返回满足条件之外的数据，相当于sql语句中where部分的not关键字。</li><li>order_by()：对结果进行排序。</li></ul><p>返回单个值的过滤器如下：</p><ul><li>get()：返回单个满足条件的对象<ul><li>如果未找到会引发”模型类.DoesNotExist”异常。</li><li>如果多条被返回，会引发”模型类.MultipleObjectsReturned”异常。</li></ul></li><li>count()：返回当前查询结果的总条数。</li><li>aggregate()：聚合，返回一个字典。</li></ul><p>判断某一个查询集中是否有数据：</p><ul><li>exists()：判断查询集中是否有数据，如果有则返回True，没有则返回False。</li></ul><h3 id="两大特性"><a href="#两大特性" class="headerlink" title="两大特性"></a>两大特性</h3><ul><li>惰性执行：创建查询集不会访问数据库，直到调用数据时，才会访问数据库，调用数据的情况包括迭代、序列化、与if合用。</li><li>缓存：使用同一个查询集，第一次使用时会发生数据库的查询，然后把结果缓存下来，再次使用这个查询集时会使用缓存的数据。</li></ul><h3 id="查询集的缓存"><a href="#查询集的缓存" class="headerlink" title="查询集的缓存"></a>查询集的缓存</h3><p>每个查询集都包含一个缓存来最小化对数据库的访问。</p><p>在新建的查询集中，缓存为空，首次对查询集求值时，会发生数据库查询，django会将查询的结果存在查询集的缓存中，并返回请求的结果，接下来对查询集求值将重用缓存中的结果。</p><p>经过存储后，可以重用查询集，第二次使用缓存中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[book.id <span class="keyword">for</span> book <span class="keyword">in</span> list]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[book.id <span class="keyword">for</span> book <span class="keyword">in</span> list]</span></pre></td></tr></table></figure><blockquote><p>querySet的cache是用于减少程序对数据库的查询，在通常的使用下会保证只有在需要的时候才会查询数据库。<br>使用exists()和iterator()方法可以优化程序对内存的使用。不过由于他们并不会生成queryet cache,可能会造成额外的数据库查询。</p></blockquote><h3 id="限制查询集"><a href="#限制查询集" class="headerlink" title="限制查询集"></a>限制查询集</h3><p>可以对查询集进行取下标或切片操作，等同于sql中的limit和offset子句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> table1 limit <span class="number">1</span> offset <span class="number">1</span>;</span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.all()[<span class="number">0</span>:<span class="number">2</span>]</span></pre></td></tr></table></figure><blockquote><p>注意：不支持负数索引。</p></blockquote><p>对查询集进行切片后返回一个新的查询集，不会立即执行查询。</p><p>如果获取一个对象，直接使用[0]，等同于[0:1].get()，但是如果没有数据，[0]引发IndexError异常，[0:1].get()如果没有数据引发DoesNotExist异常。</p><h2 id="模型类关系"><a href="#模型类关系" class="headerlink" title="模型类关系"></a>模型类关系</h2><p>关系型数据库的关系包括三种类型：</p><ul><li>一对多：ForeignKey，将字段定义在多的一端中。</li><li>多对多：ManyToManyField，将字段定义在任意一端中。</li><li>一对一：OneToOneField，将字段定义在任意一端中。</li></ul><blockquote><p>在django的模型里，还可以维护递归的关联关系，使用’self’指定</p></blockquote><h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    cname = models.CharField(max_length=<span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    sname = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    class = models.ForeignKey('ClassInfo')</span></pre></td></tr></table></figure><h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><blockquote><p>一个新闻类下可以有多条新闻，一条新闻也可以属于多个类别,例如:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        db_table = <span class="string">'typeinfo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        verbose_name = <span class="string">'新闻类型'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        verbose_name_plural = <span class="string">'所有新闻类型'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    title = models.CharField(max_length=<span class="number">60</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    content = models.TextField()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    type = models.ManyToManyField(<span class="string">'TypeInfo'</span>) <span class="comment"># 建立TypeInfo类和NewsInfo类多对多关系</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.title</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        db_table = <span class="string">'newsinfo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        verbose_name_plural = <span class="string">'所有新闻'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        verbose_name = <span class="string">'新闻'</span></span></pre></td></tr></table></figure><ul><li>添加多对多关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">book_obj=Book.objects.get(id=<span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">author_objs=Author.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.add(*author_objs)</span></pre></td></tr></table></figure><ul><li>删除多对多关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">book_obj=Book.objects.get(id=<span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">author_objs=Author.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.remove(*author_objs)   <span class="comment"># 删除所有的关系</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.remove(<span class="number">2</span>)              <span class="comment"># 删除id=2的作者关系</span></span></pre></td></tr></table></figure><h4 id="建立多对多关系"><a href="#建立多对多关系" class="headerlink" title="建立多对多关系"></a>建立多对多关系</h4><h5 id="通过ManyToManyField建立-推荐"><a href="#通过ManyToManyField建立-推荐" class="headerlink" title="通过ManyToManyField建立(推荐)"></a>通过ManyToManyField建立(推荐)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    author=models.ManyToManyField(<span class="string">'Author'</span>)</span></pre></td></tr></table></figure><blockquote><p>此时会自动在数据库创建第三张表，来存放Book和Author的对应关系<br>  这时候查询这么用<br>  eg:查询alex写过的所有书的name和price</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.filter(authors__name=<span class="string">'alex'</span>).values(<span class="string">'name'</span>,<span class="string">'price'</span>)</span></pre></td></tr></table></figure><h5 id="通过在models-py文件里新建第三张表建立"><a href="#通过在models-py文件里新建第三张表建立" class="headerlink" title="通过在models.py文件里新建第三张表建立"></a>通过在models.py文件里新建第三张表建立</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book_Author</span><span class="params">(models.Model)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    book=models.ForeignKey("Book")</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    author=models.ForeignKey(<span class="string">"Author"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Book_Author.objects.create(book_id=<span class="number">2</span>,author_id=<span class="number">2</span>)</span></pre></td></tr></table></figure><p>这时候查询这么用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">obj=Book.objects.get(id=<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.book_author_set.all()[<span class="number">0</span>].author</span></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.filter(book_author__author_name=<span class="string">'alex'</span>)</span></pre></td></tr></table></figure><p>推荐使用第一种方法，即ManyToMany的方式建立关系</p><h4 id="给第三张表增加数据"><a href="#给第三张表增加数据" class="headerlink" title="给第三张表增加数据"></a>给第三张表增加数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">obj=Classes.objects.filter(id=<span class="number">1</span>).first()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.m.add(<span class="number">1</span>)  <span class="comment"># 给id=1的class增加一个id=1的老师行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">obj.m.add(<span class="number">2</span>)  <span class="comment"># 给id=1的class增加一个id=2的老师行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">obj.m.remove(<span class="number">1</span>) <span class="comment"># 把id=1的class的id=1的老师去掉</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">obj.m.clear() <span class="comment"># 清除</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">obj.m.set([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])  <span class="comment"># 把老师设置为2，3，5.如果原来存在就不动，没有就新增</span></span></pre></td></tr></table></figure><h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    account = models.OneToOneField(Account, on_delete=models.CASCADE)</span></pre></td></tr></table></figure><h3 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h3><p>对于地区信息、分类信息等数据，表结构非常类似，每个表的数据量十分有限，为了充分利用数据表的大量数据存储功能，可以设计成一张表，内部的关系字段指向本表的主键，这就是自关联的表结构。</p><blockquote><p>说明：关系属性使用self指向本类，要求null和blank允许为空，因为一级数据是没有父级的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义地区模型类，存储省、市、区县信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    atitle=models.CharField(max_length=<span class="number">30</span>)<span class="comment">#名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    aParent=models.ForeignKey(<span class="string">'self'</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)<span class="comment">#关系</span></span></pre></td></tr></table></figure><h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><h4 id="通过对象执行关联查询"><a href="#通过对象执行关联查询" class="headerlink" title="通过对象执行关联查询"></a>通过对象执行关联查询</h4><ul><li>由一到多的访问语法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">b = BookInfo.objects.get(id=<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">b.heroinfo_set.all()</span></pre></td></tr></table></figure><ul><li>由多到一的访问语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">h = HeroInfo.objects.get(id=<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">h.hbook <span class="comment"># hbook是一对多的关系属性名</span></span></pre></td></tr></table></figure><h4 id="通过模型类执行关联查询"><a href="#通过模型类执行关联查询" class="headerlink" title="通过模型类执行关联查询"></a>通过模型类执行关联查询</h4><p><strong>由多查一</strong><br>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">关联类型类名小写__属性名__条件运算符=值</span></pre></td></tr></table></figure><p>例：查询图书，要求图书中英雄的描述包含’八‘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(heroinfo_hcontent__contains=<span class="string">'八'</span>)</span></pre></td></tr></table></figure><p><strong>由一查多</strong><br>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">一模型类关联属性名__模型类属性名__条件运算符=值</span></pre></td></tr></table></figure><p>例：查询书名为’天龙八部‘的所有英雄</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = HeroInfo.objects.filter(hbook_btitle=<span class="string">'天龙八部'</span>)</span></pre></td></tr></table></figure><h2 id="模型类扩展"><a href="#模型类扩展" class="headerlink" title="模型类扩展"></a>模型类扩展</h2><h3 id="模型实例方法"><a href="#模型实例方法" class="headerlink" title="模型实例方法"></a>模型实例方法</h3><ul><li>str()：在将对象转换成字符串时会被调用。</li><li>save()：将模型对象保存到数据表中，ORM框架会转换成对应的insert或update语句。</li><li>delete()：将模型对象从数据表中删除，ORM框架会转换成对应的delete语句。</li></ul><h3 id="模型类的属性"><a href="#模型类的属性" class="headerlink" title="模型类的属性"></a>模型类的属性</h3><p>属性objects：管理器，是models.Manager类型的对象，用于与数据库进行交互。</p><blockquote><p>当没有为模型类定义管理器时，Django会为每一个模型类生成一个名为objects的管理器，自定义管理器后，Django不再生成默认管理器objects。</p></blockquote><p>为模型类BookInfo定义管理器books语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    books = models.Manager()</span></pre></td></tr></table></figure><h4 id="模型类管理器Manager"><a href="#模型类管理器Manager" class="headerlink" title="模型类管理器Manager"></a>模型类管理器Manager</h4><p>管理器是Django的模型进行数据库操作的接口，Django应用的每个模型类都拥有至少一个管理器。Django支持自定义管理器类，继承自models.Manager。</p><p>自定义管理器类主要用于两种情况：</p><ul><li>1.修改原始查询集，重写all()方法</li><li>2.向管理器类中添加额外的方法，如向数据库中插入数据。</li></ul><p>1.修改原始查询集，重写all()方法。</p><p>a）打开models.py文件，定义类BookInfoManager</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#图书管理器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoManager</span><span class="params">(models.Manager)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">#默认查询未删除的图书信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">#调用父类的成员语法为：super().方法名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> super().all().filter(isDelete=<span class="literal">False</span>)</span></pre></td></tr></table></figure><p>b）在模型类BookInfo中定义管理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    books = BookInfoManager()</span></pre></td></tr></table></figure><p>2.在管理器类中定义创建对象的方法<br>对模型类对应的数据表进行操作时，推荐将这些操作数据表的方法封装起来，放到模型管理器类中。<br>a）打开models.py文件，定义方法create。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoManager</span><span class="params">(models.Manager)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#创建模型类，接收参数为属性赋值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_book</span><span class="params">(self, title, pub_date)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">#创建模型类对象self.model可以获得模型类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        book = self.model()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        book.btitle = title</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        book.bpub_date = pub_date</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        book.bread=<span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        book.bcommet=<span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        book.isDelete = <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># 将数据插入进数据表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        book.save()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> book</span></pre></td></tr></table></figure><p>b）为模型类BookInfo定义管理器books语法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    books = BookInfoManager()</span></pre></td></tr></table></figure><p>c）调用语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">book=BookInfo.books.create_book(<span class="string">"abc"</span>,date(<span class="number">1980</span>,<span class="number">1</span>,<span class="number">1</span>))</span></pre></td></tr></table></figure><h4 id="元选项"><a href="#元选项" class="headerlink" title="元选项"></a>元选项</h4><p>在模型类中定义类Meta，用于设置元信息，如使用db_table自定义表的名字。<br>数据表的默认名称为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;app_name&gt;_&lt;model_name&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">例：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">booktest_bookinfo</span></pre></td></tr></table></figure><p>例：指定BookInfo模型类生成的数据表名为bookinfo。<br>在BookInfo模型类中添加如下内容，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义图书模型类BookInfo</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#定义元选项</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      db_table=<span class="string">'bookinfo'</span> <span class="comment">#指定BookInfo生成的数据表名为bookinfo</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在MVC框架中的Model模块中都包括ORM:实现了数据模型与数据库的解耦。只需要面向对象编程，不需要面向数据库编写代码。在Model中定义的类，通过ORM与数据表对应，对象的属性体现对象间的关系，这种关系也被映射到数据表中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
</feed>
