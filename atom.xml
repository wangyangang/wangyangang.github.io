<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangyangang.github.io/"/>
  <updated>2019-12-08T10:08:50.334Z</updated>
  <id>https://wangyangang.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法基础</title>
    <link href="https://wangyangang.github.io/2019/12/08/%E7%AE%97%E6%B3%95/"/>
    <id>https://wangyangang.github.io/2019/12/08/%E7%AE%97%E6%B3%95/</id>
    <published>2019-12-08T08:08:49.000Z</published>
    <updated>2019-12-08T10:08:50.334Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''冒泡排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    length = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    count = <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(length<span class="number">-1</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> ls[index+<span class="number">1</span>] &lt; ls[index]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                ls[index], ls[index+<span class="number">1</span>] = ls[index+<span class="number">1</span>], ls[index]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        count += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> count == length:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">break</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> ls</span></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''选择排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n<span class="number">-1</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        min_index = i</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> ls[min_index] &gt; ls[j]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                min_index = j</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        ls[min_index], ls[i] = ls[i], ls[min_index]</span></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''插入排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> ls[i] &lt; ls[i<span class="number">-1</span>]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                ls[i], ls[i<span class="number">-1</span>] = ls[i<span class="number">-1</span>], ls[i]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                i -= <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">break</span></span></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''希尔排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''希尔排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    gap = len(ls) // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, n):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> ls[i-gap] &gt; ls[i]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                    ls[i-gap], ls[i] = ls[i], ls[i-gap]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    i -= gap</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">break</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        gap //= <span class="number">2</span></span></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(ls, first, last)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''快速排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> first &gt;= last:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    mid_value = ls[first]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    low = first</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    high = last</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> low &lt; high:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> ls[high] &gt;= mid_value:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            high -= <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        ls[low] = ls[high]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> ls[low] &lt; mid_value:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            low += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        ls[high] = ls[low]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    ls[low] = mid_value</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    quick_sort(ls, first, low<span class="number">-1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    quick_sort(ls, low+<span class="number">1</span>, last)</span></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(ls)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''归并排序'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> ls</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    mid = n // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    left_li = merge_sort(ls[:mid])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    right_li = merge_sort(ls[mid:])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    left_pointer ,right_pointer = <span class="number">0</span>, <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    result = []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> left_pointer &lt; len(left_li) <span class="keyword">and</span> right_pointer &lt; len(right_li):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> left_li[left_pointer] &lt; right_li[right_pointer]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            result.append(left_li[left_pointer])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            left_pointer += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            result.append(right_li[right_pointer])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            right_pointer += <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    result += left_li[left_pointer:]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    result += right_li[right_pointer:]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> result</span></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(ls, item)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">'''二分查找'''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    n = len(ls)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        mid = n // <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> ls[mid] == item:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">elif</span> item &lt; ls[mid]:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> binary_search(ls[:mid], item)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> binary_search(ls[mid+<span class="number">1</span>:], item)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排
      
    
    </summary>
    
    
      <category term="算法" scheme="https://wangyangang.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://wangyangang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>django基础2</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-primary2/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-primary2/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T21:53:37.478Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="Django多表操作之多对多查询记录"><a href="#Django多表操作之多对多查询记录" class="headerlink" title="Django多表操作之多对多查询记录"></a>Django多表操作之多对多查询记录</h2><ul><li>正向查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.get(id=<span class="number">3</span>).authors.all(i)</span></pre></td></tr></table></figure><ul><li>反向查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Author.objects.get(id=<span class="number">2</span>).book_set.all()</span></pre></td></tr></table></figure><blockquote><p>利用filter()查询出来的结果会放到缓存里，如果在程序里对数据库作了修改，那么需要重新查询才能找到正确的结果<br>  如果不想放到缓存里，可以这么写</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ret=Book.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ret.exists():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    ... <span class="comment"># 这样写不会把ret放到缓存里</span></span></pre></td></tr></table></figure><blockquote><p>或者使用迭代器 (iterator)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ret=Book.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ret=ret.iterator()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    print(i.name)   <span class="comment"># 这样不会用缓存</span></span></pre></td></tr></table></figure><blockquote><p>querySet的cache是用于减少程序对数据库的查询，在通常的使用下会保证只有在需要的时候才会查询数据库。<br>使用exists()和iterator()方法可以优化程序对内存的使用。不过由于他们并不会生成queryet cache,可能会造成额外的数据库查询。</p></blockquote><ul><li>聚合函数 aggregate<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Min, Sum, Max</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ret=Book.objects.all().aggregate(Sum(<span class="string">'price'</span>))  <span class="comment"># 所有书的价格总和</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ret=Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))  <span class="comment"># 所有书的平均价格</span></span></pre></td></tr></table></figure></li><li>分组函数 anonotate<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.values(<span class="string">'authors__name'</span>).anonotate(Sum(<span class="string">'price'</span>))    <span class="comment"># 计算每一个人出版的所有书的总价格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Publish.objects.values(<span class="string">'name'</span>).anonotate(Min())</span></pre></td></tr></table></figure></li><li>F查询<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.all().update(price=F(<span class="string">'price'</span>)+<span class="number">10</span>)  <span class="comment">#把每本书的价格加10</span></span></pre></td></tr></table></figure></li><li>Q查询<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.filter(~Q(name=<span class="string">'GO'</span>)|Q(price=<span class="number">100</span>)) <span class="comment">#把所有的书，name不等于GO或price等于100的，全查出来</span></span></pre></td></tr></table></figure><blockquote><p>如果要用Q查询和关键字查询一起用，那么Q查询要放在前面</p></blockquote></li></ul><hr><h3 id="Django多表操作之多对多关系"><a href="#Django多表操作之多对多关系" class="headerlink" title="Django多表操作之多对多关系"></a>Django多表操作之多对多关系</h3><ul><li>添加多对多关系<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">book_obj=Book.objects.get(id=<span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">author_objs=Author.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.add(*author_objs)</span></pre></td></tr></table></figure></li><li>删除多对多关系<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">book_obj=Book.objects.get(id=<span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">author_objs=Author.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.remove(*author_objs)   <span class="comment"># 删除所有的关系</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.remove(<span class="number">2</span>)              <span class="comment"># 删除id=2的作者关系</span></span></pre></td></tr></table></figure></li><li>建立多对的关系</li></ul><h4 id="1-通过ManyToManyField建立-推荐"><a href="#1-通过ManyToManyField建立-推荐" class="headerlink" title="1.通过ManyToManyField建立(推荐)"></a>1.通过ManyToManyField建立(推荐)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    author=models.ManyToManyField(<span class="string">'Author'</span>)</span></pre></td></tr></table></figure><blockquote><p>此时会自动在数据库创建第三张表，来存放Book和Author的对应关系<br>  这时候查询这么用<br>  eg:查询alex写过的所有书的name和price</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.filter(authors__name=<span class="string">'alex'</span>).values(<span class="string">'name'</span>,<span class="string">'price'</span>)</span></pre></td></tr></table></figure><h4 id="2-通过在models-py文件里新建第三张表建立"><a href="#2-通过在models-py文件里新建第三张表建立" class="headerlink" title="2.通过在models.py文件里新建第三张表建立"></a>2.通过在models.py文件里新建第三张表建立</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book_Author</span><span class="params">(models.Model)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    book=models.ForeignKey("Book")</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    author=models.ForeignKey(<span class="string">"Author"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Book_Author.objects.create(book_id=<span class="number">2</span>,author_id=<span class="number">2</span>)</span></pre></td></tr></table></figure><blockquote><p>这时候查询这么用：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">obj=Book.objects.get(id=<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.book_author_set.all()[<span class="number">0</span>].author</span></pre></td></tr></table></figure><blockquote><p>或者</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.filter(book_author__author_name=<span class="string">'alex'</span>)</span></pre></td></tr></table></figure><blockquote><p>推荐使用第一种方法，即ManyToMany的方式建立关系</p></blockquote><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>Django提供了数据分页的类，这些类被定义在django/core/paginator.py中。 类Paginator用于对列进行一页n条数据的分页运算。类Page用于表示第m页的数据。</p><h4 id="Paginator类实例对象"><a href="#Paginator类实例对象" class="headerlink" title="Paginator类实例对象"></a>Paginator类实例对象</h4><ul><li>方法<em>init</em>(列表,int)：返回分页对象，第一个参数为列表数据，第二个参数为每页数据的条数。</li><li>属性count：返回对象总数。</li><li>属性num_pages：返回页面总数。</li><li>属性page_range：返回页码列表，从1开始，例如[1, 2, 3, 4]。</li><li>方法page(m)：返回Page类实例对象，表示第m页的数据，下标以1开始。</li></ul><h4 id="Page类实例对象"><a href="#Page类实例对象" class="headerlink" title="Page类实例对象"></a>Page类实例对象</h4><ul><li>调用Paginator对象的page()方法返回Page对象，不需要手动构造。</li><li>属性object_list：返回当前页对象的列表。</li><li>属性number：返回当前是第几页，从1开始。</li><li>属性paginator：当前页对应的Paginator对象。</li><li>方法has_next()：如果有下一页返回True。</li><li>方法has_previous()：如果有上一页返回True。</li><li>方法len()：返回当前页面对象的个数。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;Django多表操作之多对多查询记录&quot;&gt;&lt;a href=&quot;#Django多表操作之多对多查询记录&quot; class=&quot;headerlink&quot; title=&quot;Django多表操作之多对多查询记录&quot;&gt;&lt;/a&gt;Django多表操作之多对多查询记录
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>css基础</title>
    <link href="https://wangyangang.github.io/2019/12/08/css-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/css-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:08:30.599Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            <span class="attribute">border-collapse</span>: collapse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="attribute">width</span>:<span class="number">300px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="selector-tag">td</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="attribute">height</span>:<span class="number">50px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="attribute">text-align</span>: center;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr></table></figure><blockquote><p>table设置border-collapse为collapse即可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="css" scheme="https://wangyangang.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://wangyangang.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>django-admin的使用2</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-admin2/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-admin2/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T21:43:15.325Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><blockquote><p>django-admin是一个用来管理django站点后台数据库的应用，是django自带的。<br>我们用pycharm创建django应用的时候，默认就把admin这个应用加入到settngs.py的installed app里了。</p></blockquote><h2 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h2><ol><li>更改admin页面的语言和时区,在setting.py里更改如下内容：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans`</span></span></pre></td></tr></table></figure><ol start="2"><li>更改admin页面显示的app的名称,在应用的apps.py里加上verbose_name</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App01Config</span><span class="params">(AppConfig)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    name = <span class="string">'app01'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    verbose_name = <span class="string">'博客'</span></span></pre></td></tr></table></figure><p>在app目录下的<strong>init</strong>.py里加上default_app_config</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">default_app_config = <span class="string">'app01.apps.App01Config'</span></span></pre></td></tr></table></figure><ol start="3"><li>利用model的Meta类，改变模型在admin界面的显示</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   db_table = <span class="string">'book_info'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   verbose_name = <span class="string">'书籍'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   verbose_name_plural = <span class="string">'许多书籍'</span></span></pre></td></tr></table></figure><ol start="4"><li>要想在admin界面管理哪个model，就要把它注册到admin里。也可以继承admin.ModelAdmin进行自定义.在admin.py里：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'comment'</span>] <span class="comment"># BookInfo类在后台显示哪几个字段</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;django-admin是一个用来管理django站点后台数据库的应用，是django自带的。&lt;br&gt;我们用pycharm创建django应用的时候，默认就把admin这个应用加入到settngs.py的installe
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django admin" scheme="https://wangyangang.github.io/tags/django-admin/"/>
    
  </entry>
  
  <entry>
    <title>Django Cookie Session 操作</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-cookie-session/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-cookie-session/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T08:31:51.308Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="1-COOKIE"><a href="#1-COOKIE" class="headerlink" title="1.COOKIE"></a>1.COOKIE</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    is_login = request.COOKIES.get(<span class="string">'is_login'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> is_login:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/index'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> username == <span class="string">'wyg'</span> <span class="keyword">and</span> password == <span class="string">'wyg'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            ret = redirect(<span class="string">'/index/'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            ret.set_cookie(<span class="string">'is_login'</span>, <span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="comment"># ret.set_cookie('is_login',True,max_age=10)# 有效期10秒</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="comment"># ret.set_cookie('is_login',True,expires=datetime.datetime.utcnow()+datetime.timedelta(days=3)) # 3天有效期</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> ret</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">is_login = request.COOKIES.get(<span class="string">'is_login'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> is_login:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/login/'</span>)</span></pre></td></tr></table></figure><h2 id="2-session"><a href="#2-session" class="headerlink" title="2.session"></a>2.session</h2><blockquote><p>session在django用的时候可能会出问题，这时候，把settings.py里的MIDDLEWARE_CLASS改为MIDDLEWARE，把</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span></span></pre></td></tr></table></figure><p>注释掉。session在服务器默认保存15天</p><ul><li>获取session: request.session[key]</li><li>设置session: request.session[key]=value</li><li>删除session: del request.session[key]<br>（这个删除其实是把session_data更新为一个其他的值了，并没有立即删除）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;1-COOKIE&quot;&gt;&lt;a href=&quot;#1-COOKIE&quot; class=&quot;headerlink&quot; title=&quot;1.COOKIE&quot;&gt;&lt;/a&gt;1.COOKIE&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
      <category term="cookie" scheme="https://wangyangang.github.io/tags/cookie/"/>
    
      <category term="session" scheme="https://wangyangang.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>django自定义标签和过滤器</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-custom-tags-and-filters/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-custom-tags-and-filters/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:07:57.229Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><blockquote><p>当django自带的标签和过滤器不够用时，我们可以自定义自己的标签和过滤器供模板使用</p></blockquote><ol><li>在app下创建一个python包，须包含<code>__init__.py</code>文件<br><img src="django%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt=""></li><li>在包内建一个py文件，用来定义标签和过滤器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">register = template.Library()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod2</span><span class="params">(num1)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> num1 % <span class="number">2</span> == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod4</span><span class="params">(num1, num2)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> num1 % num2 == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod3</span><span class="params">(num1, num2, num3)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span></pre></td></tr></table></figure><ol start="3"><li>在html文件里的开头处，导入要用到的python包里的py文件</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">mod3</span> 1 3 5 %&#125;</span><span class="xml"> # 自定义标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> book.id|mod2 %&#125;</span><span class="xml"> # 自定义过滤器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; book.id|mod2 &#125;&#125;</span><span class="xml"> # 自定义过滤器</span></span></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>自定义过滤器可以传一个参数，这个参数就是django模板语言传过来的那个参数</li><li>也可以传两个参数，第一个是模板语言传过来的那个，第二个是自己传的。</li><li>自定义过滤器必须有返回值</li><li>自定义标签主要用作数据处理，不可以用在if判断。自定义过滤器可以在if判断里使用</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;当django自带的标签和过滤器不够用时，我们可以自定义自己的标签和过滤器供模板使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在app下创建一个python包，须包含&lt;code&gt;__init__.py&lt;/c
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django form 组件</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-form-component/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-form-component/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:07:51.939Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> fields</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    username = fields.CharField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        min_length=<span class="number">6</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        max_length=<span class="number">16</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        error_messages=&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'required'</span>: <span class="string">'用户名不能为空'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'min_length'</span>: <span class="string">'不能少于6个字符'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'max_length'</span>: <span class="string">'不能超过16个字符'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    password = fields.CharField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        min_length=<span class="number">6</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        error_messages=&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'required'</span>: <span class="string">'密码不能为空'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'min_length'</span>: <span class="string">'不能少于6字符'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    email = fields.EmailField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        required=<span class="literal">True</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        error_messages=&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'required'</span>: <span class="string">'邮箱不能为空'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            <span class="string">'invalid'</span>: <span class="string">'邮箱格式错误'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    city = fields.ChoiceField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># choices=((0, 'beijing'), (1, '上海'),),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        widget=widgets.CheckboxSelectMultiple</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 加上这个方法，那么数据库里数据源修改之后，前台页面上的数据才会跟着修改</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, ** kwargs)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        super(CustomForm, self).__init__(*args, **kwargs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        self.fields[<span class="string">'city'</span>].widget.choices = models.UserInfo.objects.all().values_list(<span class="string">'id'</span>, <span class="string">'username'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 加上这个方法（以clean_字段名命名),可以自定义验证方式，比如去数据库看是否有重复的用户名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_user</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        v = self.cleaned_data[<span class="string">'user'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> models.UserInfo.objects.filter(username=v).count():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'用户名重复'</span>) <span class="comment"># 必须抛出Validationrror异常才能被捕获</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> v</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 加上这个方法，可以拿到Form所有的clean_data进行验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    print(self.cleaned_data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    v1 = self.cleaned_data[<span class="string">'user'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    v2 = self.cleaned_data[<span class="string">'gender'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    print(v1 == <span class="string">'1593'</span> <span class="keyword">and</span> v2 == <span class="string">'a'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> v1 == <span class="string">'1593'</span> <span class="keyword">and</span> v2 == <span class="string">'a'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'整体错误'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.cleaned_data</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">        obj = MyForm()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'obj'</span>: obj&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">        obj = MyForm(request.POST)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> obj.is_valid():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">            print(<span class="string">'验证成功'</span>, obj.cleaned_data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'main_page.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">            print(<span class="string">'验证失败'</span>, obj.errors)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'obj'</span>: obj&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_users</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">        user_form = UserForm()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'add_users.html'</span>, &#123;<span class="string">"userForm"</span>: user_form&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">        user_form = UserForm(request.POST)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> user_form.is_valid():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">            models.UserInfo.objects.create(**user_form.cleaned_data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'users.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'add_users.html'</span>, &#123;<span class="string">"userForm"</span>: user_form&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_users</span><span class="params">(request)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">        nid = request.GET.get(<span class="string">'nid'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">        data = models.UserInfo.objects.filter(id=nid).first()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">        obj = UserForm(&#123;<span class="string">'username'</span>: data.username, <span class="string">'email'</span>: data.email&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'edit_users.html'</span>, &#123;<span class="string">'obj'</span>: obj, <span class="string">'nid'</span>: nid&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">        nid = request.GET.get(<span class="string">'nid'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">        obj = UserForm(request.POST)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> obj.is_valid():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">            models.UserInfo.objects.filter(id=nid).update(**obj.cleaned_data)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'users.html'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'edit_users.html'</span>, &#123;<span class="string">'obj'</span>: obj, <span class="string">'nid'</span>: nid&#125;)</span></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/index.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：</span><span class="template-variable">&#123;&#123; obj.username &#125;&#125;</span><span class="template-variable">&#123;&#123; obj.errors.username.0 &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：</span><span class="template-variable">&#123;&#123; obj.password &#125;&#125;</span><span class="template-variable">&#123;&#123; obj.errors.password.0 &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>email：</span><span class="template-variable">&#123;&#123; obj.email &#125;&#125;</span><span class="template-variable">&#123;&#123; obj.errors.email.0 &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></pre></td></tr></table></figure><h2 id="2-自定义正则"><a href="#2-自定义正则" class="headerlink" title="2.自定义正则"></a>2.自定义正则</h2><blockquote><p>方式1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomForm</span><span class="params">(forms.Form)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    user = fields.CharField(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        error_messages=&#123;<span class="string">'invalid'</span>: <span class="string">'请输入以159开头的数字格式'</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        label=<span class="string">'user'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        validators=[RegexValidator(<span class="string">r'^[0-9]+$'</span>, <span class="string">'请输入数字'</span>), RegexValidator(<span class="string">r'^159[0-9]+$'</span>, <span class="string">'数字必须159开头'</span>)],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    )</span></pre></td></tr></table></figure><blockquote><p>方式2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomForm2</span><span class="params">(forms.Form)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    user = fields.RegexField(<span class="string">r'^[0-9]&#123;10&#125;$'</span>, error_messages=&#123;<span class="string">'invalid'</span>: <span class="string">'please type numbers 10 times'</span>&#125;)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;1-基本使用&quot;&gt;&lt;a href=&quot;#1-基本使用&quot; class=&quot;headerlink&quot; title=&quot;1.基本使用&quot;&gt;&lt;/a&gt;1.基本使用&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django ORM 操作1</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-orm-1/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-orm-1/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:07:39.777Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><hr><h2 id="正向查找和反向查找"><a href="#正向查找和反向查找" class="headerlink" title="正向查找和反向查找"></a>正向查找和反向查找</h2><ol><li>正向查</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">obj=Classes.objects.filter(id=<span class="number">1</span>).first()  <span class="comment"># id=1的班级有哪些老师</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ret=obj.m.all()</span></pre></td></tr></table></figure><ol start="2"><li>反向查</li></ol><p>如果student的外键是class，通过class反向查student：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Class.objects.filter(id=<span class="number">1</span>).first().student_set.all()</span></pre></td></tr></table></figure><p>‘student_set’这个关联名可以自定义，在student类定义的时候这样写：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cs=models.ForeignKey(class,related_name='abc')</span></pre></td></tr></table></figure><p>以后反向查就可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Class.objects.filter(id=<span class="number">1</span>).first().abc.all()</span></pre></td></tr></table></figure><h2 id="给第三张表增加数据"><a href="#给第三张表增加数据" class="headerlink" title="给第三张表增加数据"></a>给第三张表增加数据</h2><ul><li>给第三张表增加数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">obj=Classes.objects.filter(id=<span class="number">1</span>).first()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.m.add(<span class="number">1</span>)  <span class="comment"># 给id=1的class增加一个id=1的老师行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">obj.m.add(<span class="number">2</span>)  <span class="comment"># 给id=1的class增加一个id=2的老师行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">obj.m.remove(<span class="number">1</span>) <span class="comment"># 把id=1的class的id=1的老师去掉</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">obj.m.clear() <span class="comment"># 清除</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">obj.m.set([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])  <span class="comment"># 把老师设置为2，3，5.如果原来存在就不动，没有就新增</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;hr&gt;
&lt;h2 id=&quot;正向查找和反向查找&quot;&gt;&lt;a href=&quot;#正向查找和反向查找&quot; class=&quot;headerlink&quot; title=&quot;正向查找和反向查找&quot;&gt;&lt;/a&gt;正向查找和反向查找&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;正向查&lt;/li&gt;
&lt;/ol&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django ORM 操作2</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-orm-2/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-orm-2/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T21:46:46.049Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="Django多表操作之多对多查询记录"><a href="#Django多表操作之多对多查询记录" class="headerlink" title="Django多表操作之多对多查询记录"></a>Django多表操作之多对多查询记录</h2><ul><li>正向查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.get(id=<span class="number">3</span>).authors.all(i)</span></pre></td></tr></table></figure><ul><li>反向查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Author.objects.get(id=<span class="number">2</span>).book_set.all()</span></pre></td></tr></table></figure><blockquote><p>利用filter()查询出来的结果会放到缓存里，如果在程序里对数据库作了修改，那么需要重新查询才能找到正确的结果<br>  如果不想放到缓存里，可以这么写</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ret=Book.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ret.exists():</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    ... <span class="comment"># 这样写不会把ret放到缓存里</span></span></pre></td></tr></table></figure><blockquote><p>或者使用迭代器 (iterator)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ret=Book.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ret=ret.iterator()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    print(i.name)   <span class="comment"># 这样不会用缓存</span></span></pre></td></tr></table></figure><blockquote><p>querySet的cache是用于减少程序对数据库的查询，在通常的使用下会保证只有在需要的时候才会查询数据库。<br>使用exists()和iterator()方法可以优化程序对内存的使用。不过由于他们并不会生成queryet cache,可能会造成额外的数据库查询。</p></blockquote><ul><li>聚合函数 aggregate<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Min, Sum, Max</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ret=Book.objects.all().aggregate(Sum(<span class="string">'price'</span>))  <span class="comment"># 所有书的价格总和</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ret=Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))  <span class="comment"># 所有书的平均价格</span></span></pre></td></tr></table></figure></li><li>分组函数 anonotate<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.values(<span class="string">'authors__name'</span>).anonotate(Sum(<span class="string">'price'</span>))    <span class="comment"># 计算每一个人出版的所有书的总价格</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Publish.objects.values(<span class="string">'name'</span>).anonotate(Min())</span></pre></td></tr></table></figure></li><li>F查询<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.all().update(price=F(<span class="string">'price'</span>)+<span class="number">10</span>)  <span class="comment">#把每本书的价格加10</span></span></pre></td></tr></table></figure></li><li>Q查询<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.filter(~Q(name=<span class="string">'GO'</span>)|Q(price=<span class="number">100</span>)) <span class="comment">#把所有的书，name不等于GO或price等于100的，全查出来</span></span></pre></td></tr></table></figure><blockquote><p>如果要用Q查询和关键字查询一起用，那么Q查询要放在前面</p></blockquote></li></ul><hr><h3 id="Django多表操作之多对多关系"><a href="#Django多表操作之多对多关系" class="headerlink" title="Django多表操作之多对多关系"></a>Django多表操作之多对多关系</h3><ul><li>添加多对多关系<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">book_obj=Book.objects.get(id=<span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">author_objs=Author.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.add(*author_objs)</span></pre></td></tr></table></figure></li><li>删除多对多关系<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">book_obj=Book.objects.get(id=<span class="number">4</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">author_objs=Author.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.remove(*author_objs)   <span class="comment"># 删除所有的关系</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">book_obj.authors.remove(<span class="number">2</span>)              <span class="comment"># 删除id=2的作者关系</span></span></pre></td></tr></table></figure></li><li>建立多对的关系</li></ul><h4 id="1-通过ManyToManyField建立-推荐"><a href="#1-通过ManyToManyField建立-推荐" class="headerlink" title="1.通过ManyToManyField建立(推荐)"></a>1.通过ManyToManyField建立(推荐)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    author=models.ManyToManyField(<span class="string">'Author'</span>)</span></pre></td></tr></table></figure><blockquote><p>此时会自动在数据库创建第三张表，来存放Book和Author的对应关系<br>  这时候查询这么用<br>  eg:查询alex写过的所有书的name和price</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.filter(authors__name=<span class="string">'alex'</span>).values(<span class="string">'name'</span>,<span class="string">'price'</span>)</span></pre></td></tr></table></figure><h4 id="2-通过在models-py文件里新建第三张表建立"><a href="#2-通过在models-py文件里新建第三张表建立" class="headerlink" title="2.通过在models.py文件里新建第三张表建立"></a>2.通过在models.py文件里新建第三张表建立</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book_Author</span><span class="params">(models.Model)</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    book=models.ForeignKey("Book")</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    author=models.ForeignKey(<span class="string">"Author"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Book_Author.objects.create(book_id=<span class="number">2</span>,author_id=<span class="number">2</span>)</span></pre></td></tr></table></figure><blockquote><p>这时候查询这么用：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">obj=Book.objects.get(id=<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.book_author_set.all()[<span class="number">0</span>].author</span></pre></td></tr></table></figure><blockquote><p>或者</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Book.objects.filter(book_author__author_name=<span class="string">'alex'</span>)</span></pre></td></tr></table></figure><blockquote><p>推荐使用第一种方法，即ManyToMany的方式建立关系</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;Django多表操作之多对多查询记录&quot;&gt;&lt;a href=&quot;#Django多表操作之多对多查询记录&quot; class=&quot;headerlink&quot; title=&quot;Django多表操作之多对多查询记录&quot;&gt;&lt;/a&gt;Django多表操作之多对多查询记录
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django基础1</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T09:58:31.721Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="1-虚拟环境的搭建"><a href="#1-虚拟环境的搭建" class="headerlink" title="1.虚拟环境的搭建"></a>1.虚拟环境的搭建</h2><ul><li>为什么需要虚拟环境</li></ul><blockquote><p><code>django</code>是一个用来开发<code>python</code>网站的框架。因为在开发过程中要用到很多的<code>python</code>包，而<code>python</code>包和<code>django</code>框架本身以来特定的<code>python</code>版本的，当系统的<code>python</code>版本改变的时候，对应的<code>python</code>包和<code>django</code>框架可能出现兼容的问题，所以在开发的时候，我们一般会创建一个隔离的python虚拟环境，在虚拟环境里安装<code>django</code>和python包来工作。（虚拟环境还能方便的管理项目依赖的<code>python</code>包）</p></blockquote><ul><li><p>安装虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span></pre></td></tr></table></figure></li><li><p>安装虚拟环境扩展包</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo pip3 install virtualenvwrapper</span></pre></td></tr></table></figure><p>安装虚拟环境扩展包的目的是使用更加简单的命令来管理虚拟环境</p><ul><li>配置虚拟环境<br>修改用户家目录下的配置文件.bashrc，添加如下内容：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span></pre></td></tr></table></figure>使用<code>source .bashrc</code>命令使配置文件生效。<br>创建python3虚拟环境的命令如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p python3 虚拟环境名称</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例如：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p python3 test1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这样就在用户家目录的.virtualenvs目录下创建了一个新的目录test1，test1下保存的就是虚拟环境</span></span></pre></td></tr></table></figure><p>查看当前有哪些虚拟环境，在终端输入workon，然后按3次tab键，或者输入workon加一个空格，然后按两下tab键<br><img src="1.png" alt=""><br>使用某个虚拟环境的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">workon 虚拟环境名称</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">例如：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">workon test1</span></pre></td></tr></table></figure><p>删除虚拟环境，需要先退出再删除</p><ul><li>退出：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">deactivate</span></pre></td></tr></table></figure><ul><li>删除：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">rmvirtualenv test1</span></pre></td></tr></table></figure><ul><li>在虚拟环境中安装python包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">pip install 包名称</span></pre></td></tr></table></figure><blockquote><p>注意：在虚拟环境中安装python包不需要用sudo，否则会安装到主机里，而不是虚拟环境里</p></blockquote><ul><li>安装django</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">pip3 install django</span></pre></td></tr></table></figure><h2 id="django基础"><a href="#django基础" class="headerlink" title="django基础"></a>django基础</h2><h3 id="1-终端创建django项目"><a href="#1-终端创建django项目" class="headerlink" title="1.终端创建django项目"></a>1.终端创建django项目</h3><ul><li>创建django项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">django-admin startproject 项目名</span></pre></td></tr></table></figure><ul><li>创建应用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp app名</span></pre></td></tr></table></figure></li></ul><blockquote><p>注意：使用终端创建的项目，需要手动把创建的应用名称写到setting.py文件的installed_apps配置项里</p></blockquote><ul><li>启动django开发服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span></pre></td></tr></table></figure><h3 id="2-pycharm创建django项目"><a href="#2-pycharm创建django项目" class="headerlink" title="2.pycharm创建django项目"></a>2.pycharm创建django项目</h3><blockquote><p>直接新建django项目，选择解释器的时候，可以选择一个虚拟环境的python解释器的位置。如果虚拟环境没有django框架的话，会先安装django框架（这样安装django框架比较慢，不如直接在终端中启动虚拟环境然后安装django框架的速度快）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;1-虚拟环境的搭建&quot;&gt;&lt;a href=&quot;#1-虚拟环境的搭建&quot; class=&quot;headerlink&quot; title=&quot;1.虚拟环境的搭建&quot;&gt;&lt;/a&gt;1.虚拟环境的搭建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么需要虚拟环境&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django-admin的使用1</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-admin/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-admin/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:08:15.623Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p><strong>localhost:port/admin</strong> 是Django框架管理数据库的界面</p><ul><li>创建超级用户<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python3 manage.py createsuperuser <span class="comment"># 创建管理员账户</span></span></pre></td></tr></table></figure></li><li>自定义admin界面的显示内容<blockquote><p>要想管理数据库，要把模型类注册进去<br>配置<code>admin.py</code></p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    list_display=(<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'price'</span>)  <span class="comment"># book表显示哪些字段</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    list_editable=(<span class="string">'name'</span>,<span class="string">'price'</span>)      <span class="comment"># book表哪些字段可编辑</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    filter_horizontal = (<span class="string">'author'</span>,)     <span class="comment"># 编辑book的时候，作者以水平方向进行展示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    list_per_page = <span class="number">4</span>                   <span class="comment"># 每页显示的记录个数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment"># filter_vertical = ('author',)     # 编辑book的时候，作者以水平方向进行展示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    search_fields = (<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'publish__name'</span>)    <span class="comment"># 搜索框可以进行哪些字段的搜索</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    list_filter = (<span class="string">'pub_date'</span>, <span class="string">'publish'</span>)   <span class="comment"># 指定列表过滤器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    ordering = (<span class="string">'price'</span>,)   <span class="comment"># 根据什么来默认排序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    fieldsets = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'name'</span>]&#125;),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        (<span class="string">'show all'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'price'</span>, <span class="string">'publish'</span>, <span class="string">'author'</span>], <span class="string">'classes'</span>: [<span class="string">'collapse'</span>]&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    ]   <span class="comment"># 在编辑book的时候，默认只显示name，price和publish折叠</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">admin.site.register(models.Book,BookAdmin)  <span class="comment"># Book表可在admin中管理，且自定义book的显示方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">admin.site.register(models.Publish) <span class="comment"># Publish表可在admin中管理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">admin.site.register(models.Author)  <span class="comment"># Author表可在admin中管理</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;p&gt;&lt;strong&gt;localhost:port/admin&lt;/strong&gt; 是Django框架管理数据库的界面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建超级用户&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django admin" scheme="https://wangyangang.github.io/tags/django-admin/"/>
    
  </entry>
  
  <entry>
    <title>django路由url分发</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-router/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-router/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:05:40.439Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h2><ul><li>项目的urls.py文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    re_path(<span class="string">r'^app01/'</span>, include((<span class="string">'app01.urls'</span>, <span class="string">'app01'</span>), namespace=<span class="string">'app01'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><ul><li>应用的urls.py文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> IndexView, BookInfoListView</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    re_path(<span class="string">r'^index'</span>, IndexView.as_view(), name=<span class="string">'index'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    re_path(<span class="string">r'^books'</span>, BookInfoListView.as_view(template_name=<span class="string">'books.html'</span>), name=<span class="string">'books'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><h2 id="2-获取参数"><a href="#2-获取参数" class="headerlink" title="2. 获取参数"></a>2. 获取参数</h2><ul><li>位置参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^delete(\d+)/$'</span>,views.show_arg),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_arg</span><span class="params">(request,id)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'show arg %s'</span>%id)</span></pre></td></tr></table></figure></li><li>关键字参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^delete(?P&lt;id1&gt;\d+)/$'</span>,views.show_arg),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_arg</span><span class="params">(request,id1)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'show %s'</span>%id1)</span></pre></td></tr></table></figure><blockquote><p>注意：视图show_arg此时必须要有一个参数名为id1，否则报错。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;1-基本使用&quot;&gt;&lt;a href=&quot;#1-基本使用&quot; class=&quot;headerlink&quot; title=&quot;1. 基本使用&quot;&gt;&lt;/a&gt;1. 基本使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;项目的urls.py文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure 
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Gist</title>
    <link href="https://wangyangang.github.io/2019/12/08/gist/"/>
    <id>https://wangyangang.github.io/2019/12/08/gist/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:05:32.412Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="向前端返回json格式的数据"><a href="#向前端返回json格式的数据" class="headerlink" title="向前端返回json格式的数据"></a>向前端返回json格式的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_house_index</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        ret = redis_store.get(<span class="string">'home_page_data'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        current_app.logger.error(e)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        ret = <span class="literal">None</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> ret:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        current_app.logger.info(<span class="string">'hit house index info redis'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;"errno": 0, "errmsg": "OK", "data": %s&#125;'</span> % ret, <span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span></pre></td></tr></table></figure><h2 id="django中ajax的使用"><a href="#django中ajax的使用" class="headerlink" title="django中ajax的使用"></a>django中ajax的使用</h2><pre><code>*post：*</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> new_session_value = $(<span class="string">'#new_session_value'</span>).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      &#123;#var args = &#123;'name': new_session_value, 'csrfmiddlewaretoken': csrf&#125;;#&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> args = &#123;<span class="attr">name</span>: new_session_value&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> json_args = <span class="built_in">JSON</span>.stringify(args);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(json_args);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      $.ajax(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            url: <span class="string">'/app01/sessions/'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            type: <span class="string">'post'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            data: json_args,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#123;#contentType:'application/json',#&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            dataType: <span class="string">'json'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            headers:&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">              <span class="string">'X-CSRFTOKEN'</span>: csrf</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                  <span class="keyword">var</span> resno = data[<span class="string">'resno'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                  <span class="keyword">if</span>(resno == <span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">var</span> val = data[<span class="string">'name'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                    $(<span class="string">'#session_value'</span>).val(val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(resno == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                    $(<span class="string">'#session_value'</span>).val(data[<span class="string">'errmsg'</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure><ul><li>url地址前要有 “/“</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">'/order/pay'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>), '<span class="title">json</span>')</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">  ...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function">// 以下是<span class="title">jquery</span>中<span class="title">ajax</span> <span class="title">post</span>的部分定义：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">// jQuery[ method ] = function( url, data, callback, type ) &#123;&#125;</span></pre></td></tr></table></figure><h3 id="关于ajax的csrf验证："><a href="#关于ajax的csrf验证：" class="headerlink" title="关于ajax的csrf验证："></a>关于ajax的csrf验证：</h3><ul><li>传的数据不是json，那么可以把<code>csrfmiddlewaretoken</code>作为键放到参数里</li><li>传的数据是json，不能把<code>csrfmiddlewaretoken</code>放到参数里，放进去也不起作用。只能用ajax的常规写法，把<code>csrf</code>放到请求头里。</li><li>后台获取json数据，用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">json_body = json.loads(request.body)</span></pre></td></tr></table></figure>获取单个数据也可以用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">name = request.POST.get(<span class="string">'name'</span>)</span></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;向前端返回json格式的数据&quot;&gt;&lt;a href=&quot;#向前端返回json格式的数据&quot; class=&quot;headerlink&quot; title=&quot;向前端返回json格式的数据&quot;&gt;&lt;/a&gt;向前端返回json格式的数据&lt;/h2&gt;&lt;figure cla
      
    
    </summary>
    
    
      <category term="gist" scheme="https://wangyangang.github.io/categories/gist/"/>
    
    
      <category term="gist" scheme="https://wangyangang.github.io/tags/gist/"/>
    
  </entry>
  
  <entry>
    <title>mysql基础知识</title>
    <link href="https://wangyangang.github.io/2019/12/08/mysql-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/mysql-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:04:48.902Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li>查看mysql数据库日志<br>查看mysql数据库日志可以查看对数据库的操作记录。 mysql日志文件默认没有产生，需要做如下配置：<br><code>sudo vi /etc/mysql/mysql.conf.d/mysqld.conf</code><br><img src="%E6%9B%B4%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt=""><br>把68，69行前面的#去除，然后保存并使用如下命令重启mysql服务。<br><code>sudo service mysql restart</code><br>使用如下命令打开mysql日志文件。<br><code>sudo tail -f /var/log/mysql/mysql.log #可以实时查看数据库的日志内容</code><blockquote><p>适用于ubuntu</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;查看mysql数据库日志&lt;br&gt;查看mysql数据库日志可以查看对数据库的操作记录。 mysql日志文件默认没有产生，需要做如下配置：&lt;br&gt;&lt;code&gt;sudo vi /etc/mysql/mysql.conf.d/mysqld.c
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wangyangang.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://wangyangang.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="https://wangyangang.github.io/2019/12/08/python-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/python-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:04:22.767Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="1-三元运算"><a href="#1-三元运算" class="headerlink" title="1.三元运算"></a>1.三元运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">result = A <span class="keyword">if</span> B <span class="keyword">else</span> C  <span class="comment"># 如果B成立，则result等于A，否则result等于C</span></span></pre></td></tr></table></figure><h2 id="2-ajax基本操作"><a href="#2-ajax基本操作" class="headerlink" title="2.ajax基本操作"></a>2.ajax基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$.ajax(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    url:<span class="string">'/index/'</span>，</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    type:<span class="string">'GET'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    data:&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    success:function(arg)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">#   回调函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;   <span class="comment">#   ajax以GET方式发请求，会自动把data里的数据放到url里；以POST方式发，data会自动放到请求体里</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><blockquote><p>ajax发请求(计算两个数字的和)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"i1"</span> <span class="attr">placeholder</span>=<span class="string">"数字1"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        +</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"i2"</span> <span class="attr">placeholder</span>=<span class="string">"数字2"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"addForm();"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            提交</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"i3"</span> <span class="attr">placeholder</span>=<span class="string">"结果"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addForm</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">           <span class="keyword">var</span> v1=$(<span class="string">'#i1'</span>).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">           <span class="keyword">var</span> v2=$(<span class="string">'#i2'</span>).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">           $.ajax(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">               url:<span class="string">'/ajax3.html'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">               type:<span class="string">'GET'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">               data:&#123;<span class="string">'v1'</span>:v1,<span class="string">'v2'</span>:v2&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">               success:<span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                  $('#i3').val(arg) # arg就是计算结果</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">           &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">def ajax3(request):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    v1 = request.GET.get(<span class="string">'v1'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    v2 = request.GET.get(<span class="string">'v2'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        v3 = int(v1)+int(v2)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    except Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        v3 = <span class="string">'输入格式错误'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    return HttpResponse(v3) # 把计算结果传给回调函数</span></pre></td></tr></table></figure><hr><blockquote><p>另一个小例子</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        $(function()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            bindEvent()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            bindSave()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        function bindEvent() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            $(<span class="string">'#btnAdd'</span>).click(function () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                $(<span class="string">"#addModal"</span>).modal(<span class="string">'show'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        function bindSave() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            $(<span class="string">'#btnSave'</span>).click(function () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                let result = &#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                $(<span class="string">'#studentForm'</span>).find(<span class="string">'input,select'</span>).each(function()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                    let v= $(this).val();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                    let n=$(this).attr(<span class="string">'name'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(n==<span class="string">'gender'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">if</span>($(this).prop(<span class="string">'checked'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                            result[n] = v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                        result[n]=v;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                console.log(result)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                $.ajax(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                    url:<span class="string">'/add_student/'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                    type:<span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                    data:result,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                    success:function (args) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                        let dict = JSON.parse(args)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">if</span>(dict.status)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                            <span class="comment"># 通过js主动刷新页面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                            window.location.reload();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                            $(<span class="string">'#errorMSG'</span>).text(dict.message)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    &lt;/script&gt;</span></pre></td></tr></table></figure><h2 id="3-序列化"><a href="#3-序列化" class="headerlink" title="3.序列化"></a>3.序列化</h2><ol><li>python序列化</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">字符串 = json.dumps(对象)   对象-&gt;字符串</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">对象 = json.loads(字符串)   字符串-&gt;对象</span></pre></td></tr></table></figure><ol start="2"><li>javascript序列化</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">字符串 = JSON.string.ify(对象)   对象-&gt;字符串</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">对象 = JSON.parse(字符串)   字符串-&gt;对象</span></pre></td></tr></table></figure><h2 id="4-事件委托"><a href="#4-事件委托" class="headerlink" title="4.事件委托"></a>4.事件委托</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$(<span class="string">'要绑定标签的上级标签'</span>).on(<span class="string">'click'</span>,<span class="string">'要绑定的标签'</span>,function()&#123;&#125;)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;1-三元运算&quot;&gt;&lt;a href=&quot;#1-三元运算&quot; class=&quot;headerlink&quot; title=&quot;1.三元运算&quot;&gt;&lt;/a&gt;1.三元运算&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="python" scheme="https://wangyangang.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://wangyangang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>初识爬虫</title>
    <link href="https://wangyangang.github.io/2019/12/08/spider-primary/"/>
    <id>https://wangyangang.github.io/2019/12/08/spider-primary/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:02:39.033Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li>把网页的照片保存</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">response = requests.get(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    url=<span class="string">'https://movie.douban.com/chart'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">response.encoding = response.apparent_encoding  <span class="comment"># 根据来源网站的编码方式进行解码,一般不需要</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(response.text, features=<span class="string">'html.parser'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">target = soup.find(id=<span class="string">'content'</span>)  <span class="comment"># 根据id找标签</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">tables = target.find_all(<span class="string">'table'</span>) <span class="comment"># 根据类型找标签.也可以组合查:soup.find('div',id='abc')</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> tb <span class="keyword">in</span> tables:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> tb:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        a_tags = tb.find_all(<span class="string">'a'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> a_tag <span class="keyword">in</span> a_tags:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            title = a_tag.attrs.get(<span class="string">'title'</span>)  <span class="comment"># 用attrs来获取属性;用.text来获取文本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> title:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                img = a_tag.find(<span class="string">'img'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                file_path = img.attrs.get(<span class="string">'src'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                img_response = requests.get(url=file_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                print(title, file_path)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">with</span> open(title+<span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                    f.write(img_response.content)</span></pre></td></tr></table></figure><h2 id="爬虫requests"><a href="#爬虫requests" class="headerlink" title="爬虫requests"></a>爬虫requests</h2><blockquote><h2 id="1-参数"><a href="#1-参数" class="headerlink" title="1. 参数"></a>1. 参数</h2></blockquote><ul><li>requests.request</li><li>method:提交方式</li><li>url:    提交地址</li><li>headers:请求头.里面有个referer,是上次访问的网站</li><li>cookies:放在请求头里</li><li>files：在请求体里上传文件</li><li>params: 在url中传递的参数，GET</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">request.request(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    method=<span class="string">'GET'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url=<span class="string">'http://abc.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    params=&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><ul><li>data  在请求体里传里数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">request.request(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    method=<span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url=<span class="string">'http://abc.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    params=&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    data=&#123;<span class="string">'user'</span>:<span class="string">'alex'</span>,<span class="string">'pwd'</span>:<span class="string">'123'</span>&#125;    <span class="comment"># 或者data="user=alex&amp;pwd=123"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><ul><li>json 在请求体里传递数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">request.request(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    method=<span class="string">'POST'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url=<span class="string">'http://abc.com'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    params=&#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    json=&#123;<span class="string">'user'</span>:<span class="string">'alex'</span>,<span class="string">'pwd'</span>:<span class="string">'123'</span>&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;把网页的照片保存&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://wangyangang.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://wangyangang.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://wangyangang.github.io/2019/12/08/test/"/>
    <id>https://wangyangang.github.io/2019/12/08/test/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T04:13:53.963Z</updated>
    
    <content type="html"><![CDATA[<p>akaj</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;akaj&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>django类视图</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-CBV/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-CBV/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:08:06.389Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="1-基本视图"><a href="#1-基本视图" class="headerlink" title="1 基本视图"></a>1 基本视图</h2><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><blockquote><p>类django.views.generic.base.View，一般用作根据不同的请求方式调用不同的函数（get，post等）</p></blockquote><p>示例views.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> views</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(View)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'index page'</span>)</span></pre></td></tr></table></figure><p>示例urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^index'</span>, IndexView.as_view(), name=<span class="string">'index'</span>)</span></pre></td></tr></table></figure><h3 id="TemplateView"><a href="#TemplateView" class="headerlink" title="TemplateView"></a>TemplateView</h3><p>类django.views.generic.base.TemplateView</p><blockquote><p>渲染一个给定的模板,其上下文包含从URL捕获的参数<br>示例views.py：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> TemplateView</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoListView</span><span class="params">(TemplateView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    template_name = <span class="string">'books.html'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        books = BookInfo.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        context = super().get_context_data(**kwargs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        context[<span class="string">'books'</span>] = books</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> context</span></pre></td></tr></table></figure><p>示例urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># re_path(r'^books', BookInfoListView.as_view(template_name='books.html'), name='books'),</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   re_path(<span class="string">r'^books'</span>, BookInfoListView.as_view(), name=<span class="string">'books'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   ]</span></pre></td></tr></table></figure><blockquote><p>注意：如果在url的TemplateView的as_view函数里，传了template_name参数，那么TemplateView类里，可以不给template_name字段赋值；<br>如果url没传该参数，那么Template_View类里必须赋值，否则会报错.</p></blockquote><h3 id="RedirectView"><a href="#RedirectView" class="headerlink" title="RedirectView"></a>RedirectView</h3><hr><h2 id="2-通用的显示视图"><a href="#2-通用的显示视图" class="headerlink" title="2 通用的显示视图"></a>2 通用的显示视图</h2><h3 id="2-1-列表视图（ListView）"><a href="#2-1-列表视图（ListView）" class="headerlink" title="2.1 列表视图（ListView）"></a>2.1 列表视图（ListView）</h3><h4 id="1-显示对象的一个列表（一般用ListView的子类）"><a href="#1-显示对象的一个列表（一般用ListView的子类）" class="headerlink" title="1 显示对象的一个列表（一般用ListView的子类）"></a>1 显示对象的一个列表（一般用ListView的子类）</h4><blockquote><p>视图里定义一个集成ListView的视图，并指定model</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoListView2</span><span class="params">(ListView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    model = BookInfo</span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^books/'</span>, BookInfoListView2.as_view(), name=<span class="string">'books'</span>),</span></pre></td></tr></table></figure><blockquote><p>我们可以通过向视图中添加template_name属性来明确地告诉视图使用哪个模板，或者在url里写明模板名称:<code>BookInfoListView2.as_view(template_name=&#39;abc.html&#39;)</code>.但是如果没有显式模板，Django会从对象的名称中推断出一个模板。 在这种情况下，推断的模板将为”app01/bookinfo_list.html” - “app01”部分来自定义模型的应用程序名称，而“bookinfo”是小写的模型名称。</p></blockquote><blockquote><p>这个模板将会依据于一个上下文来渲染，这个上下文包含一个名为object_list包含所有publisher对象的变量 :</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> book <span class="keyword">in</span> object_list %&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> book.id|mod2 %&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; book.id &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; book.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></pre></td></tr></table></figure><p>以上就是一个最简单的对象的通用视图</p><ul><li>制作友好模板上下文<blockquote><p>在视图里添加context_object_name字段，以后模板在使用时，就可以访问该字段来取数据了</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoListView2</span><span class="params">(ListView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    model = BookInfo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    context_object_name = <span class="string">'book_list'</span></span></pre></td></tr></table></figure><h4 id="2-过滤数据"><a href="#2-过滤数据" class="headerlink" title="2 过滤数据"></a>2 过滤数据</h4><blockquote><p>我们只给类视图的model赋值，相当于：<code>queryset = BookInfo.objects.all()</code>.相当于取出所有的数据，如果想对数据进行过滤，可以给queryset字段赋值</p></blockquote><h5 id="2-1-后台过滤"><a href="#2-1-后台过滤" class="headerlink" title="2.1 后台过滤"></a>2.1 后台过滤</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoList</span><span class="params">(ListView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    queryset = BookInfo.objects.filter(name=<span class="string">'三国演义'</span>)</span></pre></td></tr></table></figure><h5 id="2-2-动态过滤（根据url参数过滤）（一般用DetailView的子类）"><a href="#2-2-动态过滤（根据url参数过滤）（一般用DetailView的子类）" class="headerlink" title="2.2 动态过滤（根据url参数过滤）（一般用DetailView的子类）"></a>2.2 动态过滤（根据url参数过滤）（一般用DetailView的子类）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#...</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    url(<span class="string">r'^authors/(?P&lt;pk&gt;[0-9]+)/$'</span>, AuthorDetailView.as_view(), name=<span class="string">'author-detail'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><blockquote><p>pk是主键的意思，这样就根据数据库中的id列进行过滤，url正则分组名必须叫pk才能根据id进行筛选。这样在url里写好后，后台得到的数据，就是根据pk值进行过滤之后的数据了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    url(<span class="string">r'^(?P&lt;slug&gt;[-\w]+)/$'</span>, ArticleDetailView.as_view(), name=<span class="string">'article-detail'</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><blockquote><p>这里的slug，是数据库里的字段名，该字段一般作为博客文章的静态名称存在。也必须叫这个名字，不能更改，数据库没有这个slug字段，就会报错。</p></blockquote><h4 id="3-执行额外的操作（比如更新last-accessed字段）"><a href="#3-执行额外的操作（比如更新last-accessed字段）" class="headerlink" title="3 执行额外的操作（比如更新last_accessed字段）"></a>3 执行额外的操作（比如更新last_accessed字段）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetailView</span><span class="params">(DetailView)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    queryset = Author.objects.all()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># Call the superclass</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        object = super(AuthorDetailView, self).get_object()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># Record the last accessed date</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        object.last_accessed = timezone.now()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        object.save()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># Return the object</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> object</span></pre></td></tr></table></figure><h3 id="2-2-详细视图（DetailView）"><a href="#2-2-详细视图（DetailView）" class="headerlink" title="2.2 详细视图（DetailView）"></a>2.2 详细视图（DetailView）</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;1-基本视图&quot;&gt;&lt;a href=&quot;#1-基本视图&quot; class=&quot;headerlink&quot; title=&quot;1 基本视图&quot;&gt;&lt;/a&gt;1 基本视图&lt;/h2&gt;&lt;h3 id=&quot;View&quot;&gt;&lt;a href=&quot;#View&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>心事浩渺连广宇</title>
    <link href="https://wangyangang.github.io/2019/12/08/preface-of-three-body/"/>
    <id>https://wangyangang.github.io/2019/12/08/preface-of-three-body/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:04:41.257Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><blockquote><p>三体Ⅲ·死神永生  序</p></blockquote><p><img src="dead-end.jpg" alt=""></p><p>多年以后，我还会记得看完《三体》的那个秋夜，我走出家门，在小区里盘桓。铅灰色的上丅海夜空几乎看不到几颗星星，但是我的心中却仿佛有无限的星光在涌动。这是一种奇异的感受，我的视觉、听觉和思维好像都被放大、重组和牵引，指向一个浩瀚的所在。</p><p>即使没有光污染，身在北半球中纬度的我也不可能看到半人马座。但是在《三体》之后，我却觉得自己与那看不见的星系中子虚乌有的三星有了一种近乎真实的联系。</p><p>从一开始，刘慈欣就被人视为中国的硬科幻代表。要知道，这是一桩吃力不讨好的活儿，在当今这个微小化、朋克化和奇幻化的世界科幻文坛，相当不与时俱进。但大刘仿佛是下定决心要为中国科幻补课一般，执著地用坚实的物理法则和潮水一般的细节为我们打造全新的世界。这些世界卓然成形，栩栩如生地向我们猛扑过来。</p><p>《三体》是一部多重旋律的作品：此岸、彼岸与红岸，过去、现在与未来，交织成中国文学中罕见的复调。故事的核心竟然是我们既熟悉又陌生的文革。当主流文学渐渐远离了这个沉重的话题，大刘竟然以太空史诗的方式重返历史的现场，用光年的尺度来重新衡量那永远的伤痕，在超越性的视野上审视苦难、救赎与背叛。这一既幻想又现实还科学的中国版《天路历程》，疯狂而冷静，沉重而壮阔，绝望而超脱。</p><p>文革仅仅是《三体》的起点。我个人认为，书中最精彩的部分是以虚拟游戏方式展示的三体世界历史。三体星系由于拥有三颗太阳，其不规则运动使得三体文明的生存条件极为严酷。为了应对变幻莫测的自然环境，他们随时可以将自己体内的水分完全排出，变成干燥的纤维状物体，以躲过完全不适合生存的恶劣气候。对于这个极为奇幻的想象世界，大刘充分发挥了他在硬科学上的特长，赋予这个世界完全真实可信的物理特性和演化发展规律。作为一个电脑工程师，大刘甚至设计了一个三体程序，来模拟宇宙文明间的相互关系。</p><p>这是一个游戏，游戏背后是一个遥远星际文明二百次毁灭与重生的传奇，游戏中的人物却是孔子、墨子、秦始皇、伽利略、葛力高利教皇、牛顿、爱因斯坦……古今中外各路人马走马灯似的上场。这是一场跨越时空的狂欢，历史、文革、三体又构成了另一个意义上的三体关系，它们之间遥相辉映而又扑朔迷离，在最不可思议的生存景象中蕴涵着触手可及的现实针对性，把三体系统的复杂性发挥得淋漓尽致。</p><p>要是换了别人，《三体》写到这个程度，大可满意收场了，但是对大刘来说，好戏才刚刚开始。在《三体Ⅱ·黑暗森林》中，地球、三体和宇宙更高级文明构成了一个更大规模的三体结构。面对三体人令人难以置信的科技和前来毁灭地球的庞大舰队，人类举全球之力，制订了“面壁计划”，由四位“面壁人”独立设计四套反击方案。说真的，其中每一套对策都构思独特、气势磅礴，令人拍案叫绝。放到其他人的作品中，每个都可以作为构筑大结局的终极解决方案。但对大刘来说，这些都只不过是铺垫和浮云。</p><p>假如在太空中存在着无数的文明，它们之间应该是什么样的关系？大刘别出心裁地设想了一门“宇宙社会学”，专门研究这个问题。宇宙社会学设定两条公理：“第一，生存是文明的第一需要；第二，文明不断增长和扩张，但宇宙中的物质总量保持不变。”乍一看这“公理”很俗很平淡很没意思，但等到最后底牌翻出来绝对震死你。在《三体Ⅱ·黑暗森林》的结尾，我体验到了多年未在文学作品中体验到的完美高潮，一种启示性的震撼，一种极致的满足。而这种满足，正来自“宇宙社会学公理”那出人意料的合理展开和推衍，经过了漫长的准备和铺垫，与作品的开头形成绝妙呼应。我想，这也就是马克思推崇的“逻辑与历史的统一”吧。在我们的中国文学中，又有多少这样的“逻辑与历史的统一”呢？</p><p>当《三体Ⅱ·黑暗森林》问世的时候，我们这些三体迷的心态相当矛盾。一方面，我们觉得《三体Ⅱ·黑暗森林》近于完美，难以想象这之后还能整出些什么来。另一方面，我们又希望大刘能够再整出些什么来。之后，又听说他在工作上遇到了一点问题，曾经考虑放弃《三体Ⅲ》的写作，着实令我们担忧不已。但最终，身处僻壤的他，又写出一本放眼宇宙的大作，这本身就是一件颇有科幻色彩的事。谢天谢地，他终于坚持了下来。</p><p>当大刘提出让我来为《三体Ⅲ》写序的时候，我的内心是一片抑制不住的狂喜，不仅是为了这份难得的荣耀，更是为了能抢在第一时间先睹为快。在一个剧透被视为不可饶恕的罪行的年代，我必须非常小心。长话短说吧，我认为《三体Ⅲ》在许多方面都超越了前两部，而且这种超越不是一点点。前面对宇宙的黑暗森林只是迂回虚写，第三部就是正面强攻了，这难度极大。我真是很佩服大刘毫不取巧的勇气，更佩服他对宇宙风景得心应手的描写，那真可以说是“精骛八极，心游万仞”。看到《三体Ⅲ》的结尾，我忍不住想起阿西莫夫的《最后的问题》，那也是对宇宙终点的描写，大家可以比较一下，看看谁的想象力走得更远，谁的细节更丰富，谁的宇宙更宏大。</p><p>《三体Ⅲ》很硬科幻，对普通读者来说，流畅度和可读性可能会不如前两部。其中一些段落甚至有一些晦涩（如对“神”的描写），但是对科幻爱好者和大刘的粉丝而言，纷至沓来的宇宙细节一定会让他们更加过瘾。而且我们理解，大刘的“硬”并非铁板一块，而是软硬相兼、虚实相间，其内在逻辑可以这样解读：越是疯狂虚幻的想象，越是超越性的思维，背后越是需要坚实的细节和强大的逻辑。刘氏宇宙学的基础是技术，而在这林林总总技术化的冷酷思考背后，有一颗柔软温暖的心。从《三体》开始，大刘越走越远，但他并非一去不回，即使在最远的地方，我们也能看到他对人类的关爱。《三体Ⅲ》始于一个近乎琼瑶式的爱情故事，一个人为自己暗恋的对象买一颗遥远的星星，这故事是如此的寂寞无助、浪漫彻骨。最终，这颗星星将为无尽的黑暗森林带来一丝光亮，卑微绝望的单恋也将成为播撒宇宙的大爱。</p><p>在整个三部曲中，我个人认为第一部最有历史感和现实性；第二部的完成度最高，结构最完整，线索最清晰，也最华丽好看；而《三体Ⅲ》则是把宇宙视野和本质性的思考推向了极致，这方面目前无人能及。在一个思想淡出文学（以及其他领域）的年代，我们看到中国的科幻界有人在默默地补位，而且远不止大刘一个人。《三体》对历史的反思，对道德的超越，到《三体Ⅲ》发展成为对全面的宇宙社会学、宇宙心理学、宇宙生态学的建构。这是屠龙之术吗？看看斯蒂芬·霍金最近的警告，也许我们会对“杞人忧天”这个成语做出全新的理解。</p><p>有时候我会忍不住想，假如有一天三体人真的降临，人类应该请大刘出山，参加地球危机委员会的工作。无论是威慑博弈、防卫反击，还是宇宙公关，大刘都是领先一步的专家。如果说天机不可泄露的话，大刘应该是我们这个世界最知晓天机的人之一了。三体人如果有一份追杀名单的话，他也绝对会名列前茅。小心啊，大刘！</p><p>当然，这只不过是幻想，只不过是神话……可是，说到神话，这难道不正是我们这个时代的奢侈品吗？坦率地说，系统性的史诗与神话一直是中国文学的弱项。在遭受后现代丅文化的洗礼之后，我们的作家更是如获至宝，把缺失视为强项，奉行“躲避崇高”的策略，鄙视宏大叙事，消解终极追问。我推崇大刘的作品，也因为他逆流而上，发扬理性主义和人文精神，为中国文学注入整体性的思维和超越性的视野。这种终极的关怀和追问，又建立在科学的逻辑和逼真的细节之上，这就让浩瀚的幻想插上了坚实的翅膀。</p><p>当尼采向世界发出“上帝已死”的宣告时，一些价值解体了，但另一些依然存在。旧的神话消失了，新的神话依然在不断诞生。人类从来没有停下追赶神话的脚步。我们惊奇地发现，在一个崭新的世纪，无尽的宇宙依然是无尽的神话的无尽的沃壤，而科学与技术已经悄然在这新神话中扮演了越来越重要的角色。大刘的世界，涵盖了从奇点到宇宙边际的所有尺度，跨越了从白垩纪到未来亿万年的漫长时光，其思想的速度和广度，早已超越了“可上九天揽月，可下五洋捉鳖”的传统境界。《三体Ⅲ》对宇宙结构的想象，已经开始涉及时间的本质和创世的秘密，但看得出大刘有意与西方的神话保持距离，走的是一条新的中国神话的道路。这是前所未有的工作。关于宇宙之始，之终，之真相，他猜了、他想了、他写了，至于是否正确，已经不重要了。虽说人类一思考，上帝就发笑，可人类如果不思考，上帝连发笑都不屑。</p><p>严锋<br>复旦大学中文系副教授<br>《新发现》杂志主编</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;blockquote&gt;
&lt;p&gt;三体Ⅲ·死神永生  序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;dead-end.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;多年以后，我还会记得看完《三体》的那个秋夜，我走出家门，在小区里盘桓。铅灰色
      
    
    </summary>
    
    
      <category term="杂文" scheme="https://wangyangang.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="三体" scheme="https://wangyangang.github.io/tags/%E4%B8%89%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>django模型models的使用</title>
    <link href="https://wangyangang.github.io/2019/12/08/django-models/"/>
    <id>https://wangyangang.github.io/2019/12/08/django-models/</id>
    <published>2019-12-08T04:11:06.000Z</published>
    <updated>2019-12-08T10:07:45.735Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="1-模型类基础"><a href="#1-模型类基础" class="headerlink" title="1. 模型类基础"></a>1. 模型类基础</h2><h3 id="1-1-创建模型类"><a href="#1-1-创建模型类" class="headerlink" title="1.1 创建模型类"></a>1.1 创建模型类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your models here.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    name = models.CharField(max_length=<span class="number">20</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                            verbose_name=<span class="string">'书籍名称'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                            null=<span class="literal">False</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                            blank=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    price = models.DecimalField(name=<span class="string">'price'</span>, verbose_name=<span class="string">'价格'</span>, max_digits=<span class="number">6</span>, decimal_places=<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    comment = models.CharField(name=<span class="string">'comment'</span>, verbose_name=<span class="string">'评论'</span>, max_length=<span class="number">200</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        db_table = <span class="string">'book_info'</span>  <span class="comment"># 定义模型在数据库里的表名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        verbose_name = <span class="string">'书籍'</span>   <span class="comment"># 定义模型在后台admin里看到的名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        verbose_name_plural = <span class="string">'许多书籍'</span> <span class="comment"># 定义模型的复数形式的名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    hname = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    hgender = models.BooleanField()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    hcomment = models.CharField(max_length=<span class="number">100</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    hbook = models.ForeignKey(<span class="string">'BookInfo'</span>, on_delete=<span class="literal">None</span>) <span class="comment"># 外键约束</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        db_table = <span class="string">'hero_info'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        verbose_name = <span class="string">'英雄'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        verbose_name_plural = <span class="string">'英雄表'</span></span></pre></td></tr></table></figure><h3 id="1-2-字段类型"><a href="#1-2-字段类型" class="headerlink" title="1.2 字段类型"></a>1.2 字段类型</h3><ul><li>AutoField: 自动增长的IntergerField，通常不用指定，不指定时，django会自动创建属性名为id的自动增长的属性</li><li>BooleanField: 布尔字段，值为True或False</li><li>NullBoleanField: 支持Null，True，False三种类型</li><li>CharField(max_length=字段长度): 字符串。</li><li>TextField: 大文本字段，一般超过4000个字符时使用</li><li>IntergerField: 整数</li><li>DecimalField(max_digits=None, decimal_places=None)：十进制浮点数。<br>参数max_digits表示总位数。<br>参数decimal_places表示小数位数。</li><li>FloatField：浮点数。</li><li>DateField[auto_now=False, auto_now_add=False])：日期。<ul><li>参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于”最后一次修改”的时间戳，它总是使用当前日期，默认为false。</li><li>参数auto_now_add表示当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false。</li><li>参数auto_now_add和auto_now是相互排斥的，组合将会发生错误。</li></ul></li><li>TimeField：时间，参数同DateField。</li><li>DateTimeField：日期时间，参数同DateField。</li><li>FileField：上传文件字段。</li><li>ImageField：继承于FileField，对上传的内容进行校验，确保是有效的图片。</li></ul><h3 id="1-3-选项"><a href="#1-3-选项" class="headerlink" title="1.3 选项"></a>1.3 选项</h3><blockquote><p>通过选项实现对字段的约束，选项如下：</p></blockquote><ul><li>null：如果为True，表示允许为空，默认值是False。</li><li>blank：如果为True，则该字段允许为空白，默认值是False。<ul><li>对比：null是数据库范畴的概念，blank是表单验证范畴的。</li></ul></li><li>db_column：字段的名称，如果未指定，则使用属性的名称。</li><li>db_index：若值为True, 则在表中会为此字段创建索引，默认值是False。</li><li>default：默认值。</li><li>primary_key：若为True，则该字段会成为模型的主键字段，默认值是False，一般作为AutoField的选项使用。</li><li>unique：如果为True, 这个字段在表中必须有唯一值，默认值是False。</li></ul><h2 id="2-模型类查询"><a href="#2-模型类查询" class="headerlink" title="2. 模型类查询"></a>2. 模型类查询</h2><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><h4 id="1-查询等"><a href="#1-查询等" class="headerlink" title="1) 查询等"></a>1) 查询等</h4><p><strong>exact：表示判等。</strong></p><p>例：查询编号为1的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.filter(id__exact=<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">可简写为：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.filter(id=<span class="number">1</span>)</span></pre></td></tr></table></figure><h4 id="2-模糊查询"><a href="#2-模糊查询" class="headerlink" title="2) 模糊查询"></a>2) 模糊查询</h4><p><strong>contains：是否包含。</strong></p><blockquote><p>说明：如果要包含%无需转义，直接写即可。</p></blockquote><p>例：查询书名包含’传’的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(btitle__contains=<span class="string">'传'</span>)</span></pre></td></tr></table></figure><p><strong>startswith、endswith：以指定值开头或结尾。</strong></p><p>例：查询书名以’部’结尾的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(btitle__endswith=<span class="string">'部'</span>)</span></pre></td></tr></table></figure><blockquote><p>以上运算符都区分大小写，在这些运算符前加上i表示不区分大小写，如iexact、icontains、istartswith、iendswith.</p></blockquote><h4 id="3-空查询"><a href="#3-空查询" class="headerlink" title="3) 空查询"></a>3) 空查询</h4><p><strong>isnull：是否为null。</strong></p><p>例：查询书名不为空的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(btitle__isnull=<span class="literal">False</span>)</span></pre></td></tr></table></figure><h4 id="4-范围查询"><a href="#4-范围查询" class="headerlink" title="4) 范围查询"></a>4) 范围查询</h4><p><strong>in：是否包含在范围内。</strong></p><p>例：查询编号为1或3或5的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(id__in=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span></pre></td></tr></table></figure><h4 id="5-比较查询"><a href="#5-比较查询" class="headerlink" title="5) 比较查询"></a>5) 比较查询</h4><p><strong>gt、gte、lt、lte：大于、大于等于、小于、小于等于。</strong></p><p>例：查询编号大于3的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(id__gt=<span class="number">3</span>)</span></pre></td></tr></table></figure><p><strong>不等于的运算符，使用exclude()过滤器。</strong></p><p>例：查询编号不等于3的图书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.exclude(id=<span class="number">3</span>)</span></pre></td></tr></table></figure><h4 id="6-日期查询"><a href="#6-日期查询" class="headerlink" title="6) 日期查询"></a>6) 日期查询</h4><p><strong>year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。</strong></p><p>例：查询1980年发表的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(bpub_date__year=<span class="number">1980</span>)</span></pre></td></tr></table></figure><p>例：查询1980年1月1日后发表的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(bpub_date__gt=date(<span class="number">1990</span>, <span class="number">1</span>, <span class="number">1</span>))</span></pre></td></tr></table></figure><h4 id="7-F对象"><a href="#7-F对象" class="headerlink" title="7) F对象"></a>7) F对象</h4><p>之前的查询都是对象的属性与常量值比较，两个属性怎么比较呢？ 答：使用F对象，被定义在django.db.models中。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">F(属性名)</span></pre></td></tr></table></figure><p>例：查询阅读量大于等于评论量的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(bread__gte=F(<span class="string">'bcomment'</span>))</span></pre></td></tr></table></figure><p>可以在F对象上使用算数运算。</p><p>例：查询阅读量大于2倍评论量的图书。</p><p><code>list = BookInfo.objects.filter(bread__gt=F(&#39;bcomment&#39;) * 2)</code></p><h4 id="8-Q对象"><a href="#8-Q对象" class="headerlink" title="8) Q对象"></a>8) Q对象</h4><p>多个过滤器逐个调用表示逻辑与关系，同sql语句中where部分的and关键字。</p><p>例：查询阅读量大于20，并且编号小于3的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.filter(bread__gt=<span class="number">20</span>,id__lt=<span class="number">3</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">或</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list=BookInfo.objects.filter(bread__gt=<span class="number">20</span>).filter(id__lt=<span class="number">3</span>)</span></pre></td></tr></table></figure><p>如果需要实现逻辑或or的查询，需要使用Q()对象结合|运算符，Q对象被义在django.db.models中。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Q(属性名__运算符=值)</span></pre></td></tr></table></figure><p>例：查询阅读量大于20的图书，改写为Q对象如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(Q(bread__gt=<span class="number">20</span>))</span></pre></td></tr></table></figure><p>Q对象可以使用&amp;、|连接，&amp;表示逻辑与，|表示逻辑或。</p><p>例：查询阅读量大于20，或编号小于3的图书，只能使用Q对象实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(Q(bread__gt=<span class="number">20</span>) | Q(pk__lt=<span class="number">3</span>))</span></pre></td></tr></table></figure><p>Q对象前可以使用~操作符，表示非not。</p><p>例：查询编号不等于3的图书。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(~Q(pk=<span class="number">3</span>))</span></pre></td></tr></table></figure><h4 id="9-聚合函数"><a href="#9-聚合函数" class="headerlink" title="9) 聚合函数"></a>9) 聚合函数</h4><p>使用aggregate()过滤器调用聚合函数。聚合函数包括：Avg，Count，Max，Min，Sum，被定义在django.db.models中。</p><p>例：查询图书的总阅读量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.aggregate(Sum(<span class="string">'bread'</span>))</span></pre></td></tr></table></figure><p>注意aggregate的返回值是一个字典类型，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'聚合类小写__属性名'</span>:值&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">如:&#123;<span class="string">'sum__bread'</span>:<span class="number">3</span>&#125;</span></pre></td></tr></table></figure><p>使用count时一般不使用aggregate()过滤器。</p><p>例：查询图书总数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.count()</span></pre></td></tr></table></figure><p>注意count函数的返回值是一个数字。</p><h4 id="10-查询集"><a href="#10-查询集" class="headerlink" title="10) 查询集"></a>10) 查询集</h4><ul><li>查询集切片(限制查询集)<blockquote><p>相当于sql中的limit和offset子句。例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> table1 limit <span class="number">1</span> offset <span class="number">1</span>;</span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">BookInfo.objects.all()[<span class="number">1</span>:<span class="number">2</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从所有集合中选择从索引1到索引2，总共2-1个元素。如果获取一个对象，直接用[0]，等同于[0:1].get(),如果没有数据，[0]引发IndexError异常，[0:1].get()如果没有数据引发DoesNotExist异常。</span></span></pre></td></tr></table></figure></li></ul><h2 id="3-模型类关系"><a href="#3-模型类关系" class="headerlink" title="3. 模型类关系"></a>3. 模型类关系</h2><p><strong>三种关系</strong></p><ul><li>一对多：ForeignKey，将字段定义在多的一端中。</li><li>多对的：ManyToManyField，将字段定义在任意一端中。</li><li>一对一：OneToOneField，将字段定义在任意一端中。</li></ul><h4 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">cname = models.CharField(max_length=<span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">sname = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">class = models.ForeignKey('ClassInfo')</span></pre></td></tr></table></figure><h4 id="多对的关系"><a href="#多对的关系" class="headerlink" title="多对的关系"></a>多对的关系</h4><blockquote><p>一个新闻类下可以有多条新闻，一条新闻也可以属于多个类别</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.name</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        db_table = <span class="string">'typeinfo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        verbose_name = <span class="string">'新闻类型'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        verbose_name_plural = <span class="string">'所有新闻类型'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    title = models.CharField(max_length=<span class="number">60</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    content = models.TextField()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    pub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    type = models.ManyToManyField(<span class="string">'TypeInfo'</span>) <span class="comment"># 建立TypeInfo类和NewsInfo类多对多关系</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.title</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        db_table = <span class="string">'newsinfo'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        verbose_name_plural = <span class="string">'所有新闻'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        verbose_name = <span class="string">'新闻'</span></span></pre></td></tr></table></figure><h4 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    account = models.OneToOneField(Account, on_delete=models.CASCADE)</span></pre></td></tr></table></figure><h4 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h4><p>对于地区信息、分类信息等数据，表结构非常类似，每个表的数据量十分有限，为了充分利用数据表的大量数据存储功能，可以设计成一张表，内部的关系字段指向本表的主键，这就是自关联的表结构。</p><blockquote><p>说明：关系属性使用self指向本类，要求null和blank允许为空，因为一级数据是没有父级的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义地区模型类，存储省、市、区县信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    atitle=models.CharField(max_length=<span class="number">30</span>)<span class="comment">#名称</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    aParent=models.ForeignKey(<span class="string">'self'</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)<span class="comment">#关系</span></span></pre></td></tr></table></figure><h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><ul><li>由一到多的访问语法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">b = BookInfo.objects.get(id=<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">b.heroinfo_set.all()</span></pre></td></tr></table></figure></li><li>由多到一的访问语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">h = HeroInfo.objects.get(id=<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">h.hbook <span class="comment"># hbook是一对多的关系属性名</span></span></pre></td></tr></table></figure></li><li>关联查询</li></ul><p><strong>由多查一</strong><br>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">关联类型类名小写__属性名__条件运算符=值</span></pre></td></tr></table></figure><p>例：查询图书，要求图书中英雄的描述包含’八‘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = BookInfo.objects.filter(heroinfo_hcontent__contains=<span class="string">'八'</span>)</span></pre></td></tr></table></figure><p><strong>由一查多</strong><br>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">一模型类关联属性名__模型类属性名__条件运算符=值</span></pre></td></tr></table></figure><p>例：查询书名为’天龙八部‘的所有英雄</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">list = HeroInfo.objects.filter(hbook_btitle=<span class="string">'天龙八部'</span>)</span></pre></td></tr></table></figure><h2 id="4-模型类扩展"><a href="#4-模型类扩展" class="headerlink" title="4. 模型类扩展"></a>4. 模型类扩展</h2><h3 id="4-1-模型类管理器"><a href="#4-1-模型类管理器" class="headerlink" title="4.1 模型类管理器"></a>4.1 模型类管理器</h3><blockquote><p>每个模型类都有一个默认的管理器对象，默认为objects。我们可以自定义自己的模型类管理器，继承自models.Manager，一般用来自定义查询和插入对象<br>例子：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.定义管理器类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoManager</span><span class="params">(models.Manager)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> super().all().filter(isDelete=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">#创建模型类，接收参数为属性赋值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_book</span><span class="params">(self, title, pub_date)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">#创建模型类对象self.model可以获得模型类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        book = self.model()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        book.btitle = title</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        book.bpub_date = pub_date</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        book.bread=<span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        book.bcommet=<span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        book.isDelete = <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="comment"># 将数据插入进数据表</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        book.save()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> book</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.在模型类中定义管理器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    books = BookInfoManager()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.调用的语法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">book = BookInfo.books.create_book(<span class="string">"abc"</span>,date(<span class="number">1980</span>,<span class="number">1</span>,<span class="number">1</span>))</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;

&lt;h2 id=&quot;1-模型类基础&quot;&gt;&lt;a href=&quot;#1-模型类基础&quot; class=&quot;headerlink&quot; title=&quot;1. 模型类基础&quot;&gt;&lt;/a&gt;1. 模型类基础&lt;/h2&gt;&lt;h3 id=&quot;1-1-创建模型类&quot;&gt;&lt;a href=&quot;#1-1-创建模型
      
    
    </summary>
    
    
      <category term="django" scheme="https://wangyangang.github.io/categories/django/"/>
    
    
      <category term="django" scheme="https://wangyangang.github.io/tags/django/"/>
    
  </entry>
  
</feed>
